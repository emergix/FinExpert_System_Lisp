; fichier contenant les object et fonction relatif aux action en simulation

(add-knowledge-base 'action-kb
                    'object-de-base
                    '(action )
                    nil)

(user-instanciate 'metaclass 'action  '(instrument-financier))
(add-slot-user 'action 'support-action 'instance)
(add-attribute-user 'action 'dernier-cours 'action-remplit-donnees 'instance)
(add-attribute-user 'action 'date-du-dernier-cours 'action-remplit-donnees 'instance)
(add-attribute-user 'action 'dernier-dividende 'action-remplit-donnees 'instance)
(add-attribute-user 'action 'date-du-dernier-dividende 'action-remplit-donnees 'instance)
(add-attribute-user 'action 'quotite 'action-remplit-donnees 'instance)
(add-attribute-user 'action 'nom 'action-remplit-donnees 'instance)
(add-attribute-user 'action 'ponderation-dans-le-cac40 'action-remplit-donnees 'instance)
(add-attribute-user 'action 'beta 'action-remplit-donnees 'instance)
(add-attribute-user 'action 'historique-quotidien 'action-remplit-donnees 'instance)
;(add-attribute-user 'action 'historique-hebdomadaire 'action-remplit-donnees 'instance)
(add-slot-user 'action 'ticker 'instance)
(add-slot-user 'action 'code-rga 'instance)
(add-slot-user 'action 'marche 'instance)
(add-slot-user 'action 'premier-cours 'instance)
(add-slot-user 'action 'plus-haut-cours 'instance)
(add-slot-user 'action 'plus-bas-cours 'instance)
(add-slot-user 'action 'volume 'instance)
(add-slot-user 'action 'date-d-operation 'instance)
(add-slot-user 'action 'instruments-derives 'instance)
(add-attribute-user 'action 'liste-des-versements-de-dividendes 'action-liste-des-versements-de-dividendes 'instance)
(add-attribute-user 'action 'rendement 'action-rendement 'instance)

(add-method 'action 'action-set-date 'set-date 'superseed)
(add-method 'action 'action-initialize 'initialize 'superseed)
(add-method 'action 'action-delta-local-total 'delta-local-total 'superseed)
(add-method 'action 'action-delta-asymptotique-total 'delta-asymptotique-total 'superseed)
(add-method 'action 'action-delta-local 'delta-local 'superseed)
(add-method 'action 'action-delta-asymptotique 'delta-asymptotique 'superseed)
(add-method 'action 'action-delta-30+ 'delta-30+ 'superseed)
(add-method 'action 'action-delta-30+-total 'delta-30+-total 'superseed)

(add-method 'action 'action-delta-30- 'delta-30- 'superseed)
(add-method 'action 'action-delta-30--total 'delta-30--total 'superseed)

(de action-initialize (action)
    nil)

          
(de action-remplit-donnees (object slot)
    (prog ((ticker (get-slot-value object 'ticker))
           savechan-1 chan name input)
          (when (not (memq ticker *liste-d-actions-de-base*)) (return  (get-slot-value object slot)))
          (setq name (catenate "/usr/jupiter/olivier/expert/donnees/" 
                               (string ticker)
                               ".dat"))
          
          (setq savechan-1 (inchan))
          (setq chan (openi name))
          (inchan chan)
          (untilexit eof 
                     (setq input (read))
                     (when (and (consp input)
                                (get-slot object (car input))
                                )
                           (setf (get-slot-value object (car input)) (cadr input))
                           (setf (get-slot-facet-value object (car input) 'determined) t)
                           ))
          (inchan savechan-1)
          (when  *chargement-des-historiques*
                 (setq valeur-q (fetch-courbe-quotidien-from-current-directory
                                 (catenate (string ticker)  "-q")  ""))
                 (setf (get-slot-value object 'historique-quotidien) valeur-q)
                 ;(setq valeur-h (fetch-courbe-hebdomadaire-from-current-directory (catenate (string ticker)
                 ;                                                              "-h")
                 ;                                                   ""))
                 ;(setf (get-slot-value object 'historique-hebdomadaire) valeur-h)
                 )
          
          (return (get-slot-value object slot))))




(de action-set-date (action date)
    (prog ((histo-q (get-slot-value action 'historique-quotidien))
           c-ouvert c-fermet c-plus-haut c-plus-bas c-volume)
          (setq c-ouvert (get-slot-value histo-q 'premier-cours))
          (setq c-fermet (get-slot-value histo-q 'dernier-cours))
          (setq c-plus-haut (get-slot-value histo-q 'plus-haut))
          (setq c-plus-bas (get-slot-value histo-q 'plus-bas))
          (setq c-volume (get-slot-value histo-q 'volume))
          (setf (get-slot-value action 'date-d-operation) date)
          (setf (get-slot-value action 'premier-cours)
                (courbe-2d-interpolation c-ouvert date))
          (setf (get-slot-value action 'dernier-cours)
                (courbe-2d-interpolation c-fermet date))
          (setf (get-slot-value action 'plus-haut-cours)
                (courbe-2d-interpolation c-plus-haut date))
          (setf (get-slot-value action 'plus-bas-cours)
                (courbe-2d-interpolation c-plus-bas date))
          (setf (get-slot-value action 'volume)
                (courbe-2d-interpolation c-volume date))
          ))
(de ticker-expect-action (ticker)
    (prog ((actions (get-all-instances 'action)) tik bi-mot action)
          (setq bi-mot (ticker-expect-mot ticker))
          (when (null bi-mot) (return nil))
          (setq tik (concat (car bi-mot)))
          loop
          (when (null actions) (go essai-2))
          (when (or (eq (car actions) tik)
                    (eq (get-slot-value (car actions) 'ticker) tik))
                (return (list (string (car actions)) (cadr bi-mot))))
          (setq actions (cdr actions))
          (go loop)
          essai-2
          (when (memq tik  *liste-d-actions-de-base*)
                
                (setq action (user-instanciate 'action nil nil))
                (setf (get-slot-value action 'support-action) action)
                (setf (get-slot-value action 'ticker) tik)
                (setq poid (user-get-value action 'ponderation-dans-le-cac40))
                (return (list   action (cadr bi-mot))))
          (when (memq tik '(put call cv)) (return nil))
          (setq action (user-instanciate 'action nil nil))
          (setf (get-slot-value action 'support-action) action)
          (setf (get-slot-value action 'ticker) tik)
          (return (list action (cadr bi-mot)))
                          ))
    
(de action-from-ticker (ticker)
    (prog ((actions (get-all-instances 'action)))
          loop
          (when (null actions) (return nil))
          (when (eq (get-slot-value (car actions) 'ticker) ticker)
                (return (car actions)))
          (setq actions (cdr actions))
          (go loop)))

(de action-from-rga (rga)
    (prog ((actions (get-all-instances 'action)))
          loop
          (when (null actions) (return nil))
          (when (eq (get-slot-value (car actions) 'code-rga) rga)
                (return (car actions)))
          (setq actions (cdr actions))
          (go loop)))




(de action-delta-local-total (action compte)
    (let ((positions (mapcan '(lambda (x) (cond((and (eq (get-slot-value x 'compte) compte)
                                                     (eq (get-slot-value (get-slot-value x 'type-d-instrument)
                                                                         'support-action) 
                                                         action))
                                                (list x))
                                               (t nil)))
                             (get-all-instances 'position))) delta)
      (setq delta (apply '+ (mapcar '(lambda (y) ($ y 'delta-local))
                                    positions)))
      delta))

(de action-delta-30+-total (action compte)
    (let ((positions (mapcan '(lambda (x) (cond((and (eq (get-slot-value x 'compte) compte)
                                                     (eq (get-slot-value (get-slot-value x 'type-d-instrument)
                                                                         'support-action) 
                                                         action))
                                                (list x))
                                               (t nil)))
                             (get-all-instances 'position))) delta)
      (setq delta (apply '+ (mapcar '(lambda (y) ($ y 'delta-30+))
                                    positions)))
      (/ delta (get-slot-value action 'dernier-cours))))

(de action-delta-30--total (action compte)
    (let ((positions (mapcan '(lambda (x) (cond((and (eq (get-slot-value x 'compte) compte)
                                                     (eq (get-slot-value (get-slot-value x 'type-d-instrument)
                                                                         'support-action) 
                                                         action))
                                                (list x))
                                               (t nil)))
                             (get-all-instances 'position))) delta)
      (setq delta (apply '+ (mapcar '(lambda (y) ($ y 'delta-30-))
                                    positions)))
      (/ delta (get-slot-value action 'dernier-cours))))


(de action-delta-asymptotique-total (action compte)
    (let ((positions (mapcan '(lambda (x) (cond((and (eq (get-slot-value x 'compte) compte)
                                                     (eq (get-slot-value (get-slot-value x 'type-d-instrument)
                                                                         'support-action)
                                                         action))
                                                (list x))
                                               (t nil)))
                             (get-all-instances 'position))) delta m  positions-option)
      (setq delta (list 0 0))
      (mapc '(lambda (z) (setq delta (list (+ (car z) (car delta))
                                          (+ (cadr z) (cadr delta)))))
            
            (mapcar '(lambda (y) ($ y 'delta-asymptotique))
                    positions))
      (setq m 0)
      (setq positions-option (mapcan '(lambda (x) (cond((is-a (get-slot-value x 'type-d-instrument) 'option)
                                                        (list x))
                                                       (t nil)))
                                     positions))


;                      CORRECTION DES EFFECTS CAUSES PAR LES SUPPORTS SYNTHETIQUES
      (mapc '(lambda (z1) 
               (mapc '(lambda (z2) 
                        (cond((and (eq (get-slot-value z1 'type-d-instrument)
                                       (get-slot-value (get-slot-value z2 'type-d-instrument) 
                                                       'option-contraire-associee))
                                   (not (eq (get-slot-value z1 'sens)
                                            (get-slot-value z2 'sens))))
                              (setq m (+ m 
                                         (min (abs (get-slot-value z1 'nombre-d-instruments))
                                              (abs (get-slot-value z2 'nombre-d-instruments)))
                                         )))))
                     (copy positions-option)))
            (copy positions-option))
      (setq delta (list (+ (car delta) (/ m 2))
                        (- (cadr delta) (/ m 2))))
      delta))


            
(de action-delta-local (action)
    1)

(de action-delta-30+ (action)
    (* 0.3 (get-slot-value action 'dernier-cours)))

(de action-delta-30- (action)
    (- (* 0.3 (get-slot-value action 'dernier-cours))))

(de action-delta-asymptotique (action)
    (list 1 1))

(de action-rendement (action slot)
    (let ((cours (user-get-value action 'dernier-cours))
          (dividende (user-get-value action 'dernier-dividende)))
      (/ dividende cours)
    ))

(de action-liste-des-versements-de-dividendes (action slot)
    (let ((date (convert-time (user-get-value action 'date-du-dernier-dividende)))
          (aujourdhui (convert-time *date-des-calculs*)))
      (cond((>= date aujourdhui) (list (/ (- date aujourdhui) 365.)))
           (t (list (1+  (/ (- date aujourdhui) 365.)))))
    ))