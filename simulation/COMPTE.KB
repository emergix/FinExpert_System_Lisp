; fichier contenant les objects et fonctions associees aux comptes
;*********************************************************************************************
;                             COMPTE
;******************************************************************************************

(add-knowledge-base 'compte-kb
                    'object-de-base
                    '(compte position)
                    nil)


(user-instanciate 'metaclass 'compte nil)
(add-slot-user 'compte 'nom 'instance)
(add-slot-user 'compte 'date-courante 'instance)
(add-slot-user 'compte 'liquidites 'instance)
(add-slot-user 'compte 'portefeuille 'instance)
(add-slot-user 'compte 'liste-de-positions 'instance)
(add-slot-user 'compte 'instance-liquidation 'instance)
(add-slot-user 'compte 'instance-reglement-espece 'instance)
(add-slot-user 'compte 'emprunts 'instance)
(add-slot-user 'compte 'versement-courant 'instance)


(add-method 'compte 'compte-set-date 'set-date 'superseed) 
(add-method 'compte 'compte-premier-jour-de-liquidation 'premier-jour-de-liquidation 'superseed)
(add-method 'compte 'compte-dernier-jour-de-liquidation 'dernier-jour-de-liquidation 'superseed)
(add-method 'compte 'compte-depouillement 'depouillement 'superseed)
(add-method 'compte 'compte-valorisation-a-la-fermeture 'valorisation 'superseed)
(add-method 'compte 'compte-valorisation-a-l-ouverture 'valorisation-a-l-ouverture 'superseed)
(add-method 'compte 'compte-s-portefeuille 's-portefeuille 'superseed)
(add-method 'compte 'compte-portefeuille-total 'portefeuille-total 'superseed)
(add-method 'compte 'compte-suspens-a-payer 'suspens-a-payer 'superseed)
(add-method 'compte 'compte-initialize 'initialize 'superseed)

(add-post-instanciation-demon compte 'initialisation-du-compte 'merge-before)
(de initialisation-du-compte (compte)
    (setf (get-slot-value compte 'liquidites) 0.)
    (setf (get-slot-value compte 'instance-reglement-espece) 0.)
    (setf (get-slot-value compte 'emprunts) 0.)
    )


(de compte-initialize (compte)
    (setf (get-slot-value compte 'liquidites) 0.)
    (setf (get-slot-value compte 'instance-reglement-espece) 0.)
    (setf (get-slot-value compte 'emprunts) 0.)
    (setf (get-slot-value compte 'portefeuille) nil)
    (setf (get-slot-value compte 'instance-liquidation) nil)
    (setf (get-slot-value compte 'versement-courant) 0.)
    )

(de compte-s-portefeuille (compte)
    (mapcar '(lambda (x) (list (get-slot-value (car x) 'nom) (cadr x)))
            (get-slot-value compte 'portefeuille)))

(de compte-valorisation-a-la-fermeture (compte)
    (let ((liquidites (get-slot-value compte 'liquidites))
          (portefeuille (get-slot-value compte 'portefeuille))
          (instance-reglement-espece (get-slot-value compte 'instance-reglement-espece))
          (emprunts (get-slot-value compte 'emprunts))
          (instance-liquidation (get-slot-value compte 'instance-liquidation))
          (evaluation-du-portefeuille 0.) (evaluation-des-ordres-en-instance 0.))

      (mapc '(lambda (x1) 
               (setq evaluation-du-portefeuille (+ evaluation-du-portefeuille
                                                   (* (get-slot-value (car x1) 'dernier-cours)
                                                      (cadr x1)))))
            portefeuille)

      (mapc '(lambda (x1) 
               (setq evaluation-des-ordres-en-instance (+ evaluation-des-ordres-en-instance
                                                          (* (cond ((eq (car x1) 'achat) 1.)
                                                                   (t -1.))
                                                             (- (get-slot-value (caddr x1) 'dernier-cours) 
                                                                (cadddr x1))
                                                             (cadr x1)))))
            instance-liquidation)

      (+ liquidites
         instance-reglement-espece
         evaluation-du-portefeuille
         evaluation-des-ordres-en-instance
         (* emprunts -1.))))

(de compte-suspens-a-payer* (compte)
    (let ((instance-reglement-espece (get-slot-value compte 'instance-reglement-espece))
          (instance-liquidation (get-slot-value compte 'instance-liquidation))
          (evaluation-des-ordres-en-instance 0.))  
      (mapc '(lambda (x1) 
               (setq evaluation-des-ordres-en-instance (+ evaluation-des-ordres-en-instance
                                                          (* (cond ((eq (car x1) 'achat) 1.)
                                                                   (t -1.))
                                                             (cadddr x1)
                                                             (cadr x1)))))
            instance-liquidation)
(print "il:" instance-liquidation "ire:" instance-reglement-espece " ev-il:" evaluation-des-ordres-en-instance)
      (- evaluation-des-ordres-en-instance
         instance-reglement-espece)))

(de compte-portefeuille-total (compte)
    (let ((portefeuille (get-slot-value compte 'portefeuille))
          (instance (get-slot-value compte 'instance-liquidation)))
      (portefeuille-plus portefeuille 
                         (mapcar '(lambda (x)
                                    (list   (caddr x)
                                            (cond((eq (car x) 'achat) (cadr x))
                                                 (t (- (cadr x))))
                                        ))
                                 instance))))
    
      
(de compte-set-date (compte date)
    (prog ((old-date (get-slot-value compte 'date-courante)))
          (setf (get-slot-value compte 'date-courante) date)
          (cond ((null old-date)
                 t)
                ((saute-un-premier-jour-de-liquidation? old-date date)
                 ($ compte 'premier-jour-de-liquidation)
                 )
                ((saute-un-dernier-jour-de-liquidation? old-date date)
                 ($ compte 'dernier-jour-de-liquidation))
                )
          (return date)))


(de compte-premier-jour-de-liquidation (compte)
    (prog ((instance-liquidation (get-slot-value compte 'instance-liquidation))
           (portefeuille (get-slot-value compte 'portefeuille))
           (instance-reglement-espece (get-slot-value compte 'instance-reglement-espece))
           couple)
          (mapc '(lambda (x) 
                   (setq couple (depouillement-elementaire instance-reglement-espece portefeuille x nil))
                   (setq instance-reglement-espece (car couple))
                   (setq portefeuille (cadr couple))
                   )
                instance-liquidation)
          (setf (get-slot-value compte 'instance-reglement-espece) instance-reglement-espece)
          (setf (get-slot-value compte 'portefeuille) portefeuille)
          (setf (get-slot-value compte 'instance-liquidation) nil)
          ))

(de compte-dernier-jour-de-liquidation (compte)
    (prog ((instance-reglement-espece (get-slot-value compte 'instance-reglement-espece))
           (liquidites (get-slot-value compte 'liquidites))
           )
          (setq liquidites (+ instance-reglement-espece liquidites))
          (setf (get-slot-value compte 'instance-reglement-espece) 0)
          (setf (get-slot-value compte 'liquidites) liquidites)
          ))
          



;*******************************************************************************************
;                               POSITION
;******************************************************************************************

(user-instanciate 'metaclass 'position nil)
(add-slot-user 'position 'nombre-d-instruments 'instance)
(add-slot-user 'position 'type-d-instrument 'instance)
(add-attribute-user 'position 'position-object-associe 'object-associe 'instance)
(add-slot-user 'position 'sens 'instance)
(add-slot-user 'position 'date-de-negociation 'instance) 
;si  cette date est precisee alors la position a ete acquise en une fois sinon le slot prix-negocie n a pas de sens non plus
(add-slot-user 'position 'prix-negocie 'instance)
(add-slot-user 'position 'stipulation 'instance)    ; 'ri ou 'rm
(add-slot-user 'position 'compte 'instance)
(add-slot-user 'position 'position-depouillee 'instance)

(add-method 'position 'position-depouillement 'depouillement  'merge-after)
(add-method 'position 'position-delta-local 'delta-local 'superseed)
(add-method 'position 'position-delta-asymptotique 'delta-asymptotique 'superseed)
(add-method 'position 'position-delta-30+ 'delta-30+ 'superseed)
(add-method 'position 'position-delta-30- 'delta-30- 'superseed)

(de position-depouillement (position)
    (let ((compte (get-slot-value position 'compte))
          (nb (get-slot-value position 'nombre-d-instruments))
          (type (get-slot-value position 'type-d-instrument))
          (object (user-get-value position 'object-associe))
          (stipulation (get-slot-value position 'stipulation))
          (sens (get-slot-value position 'sens))
          (prix (get-slot-value position 'prix-negocie))
          )
      
      ($ compte 'depouillement (list (list sens nb object prix stipulation)))
      (setf (get-slot-value position 'position-depouillee ) t)
      ))
      
  
(de position-object-associe (position slot)
    (prog ((type (get-slot-value position 'type-d-instrument))
          (instruments-list (get-all-instances 'instrument-financier)))
          loop
          (when (null instruments-list) (return nil))
          (when (eq (get-slot-value (car instruments-list) 'ticker) type) (return (car instruments-list)))
          (setq instruments-list (cdr instruments-list))
          (go loop)))



(de position-delta-local (position)
    (* (get-slot-value position 'nombre-d-instruments)
       ($ (get-slot-value position 'type-d-instrument) 'delta-local)))
    )

(de position-delta-30+ (position)
    (* (get-slot-value position 'nombre-d-instruments)
       ($ (get-slot-value position 'type-d-instrument) 'delta-30+)))
    )


(de position-delta-30- (position)
    (* (get-slot-value position 'nombre-d-instruments)
       ($ (get-slot-value position 'type-d-instrument) 'delta-30-)))
    )


(de position-delta-asymptotique (position)
    (let ((delta ($ (get-slot-value position 'type-d-instrument) 'delta-asymptotique))
          (nb (get-slot-value position 'nombre-d-instruments)))
      (cond ((>= nb 0) (list (* nb (car delta))
                             (* nb (cadr delta))))
            (t (list (* nb (cadr delta))
                     (* nb (car delta))))))
    )

;*******************************************************************************************
;                               FONCTIONS ANNEXES
;******************************************************************************************


(de saute-un-premier-jour-de-liquidation? (old-date date)
    (cond ((any '(lambda (x)(and (time->  x old-date)
                                 (time->= date x)))
                '((88 1 21 0 0 0 )
                  (88 2 19 0 0 0 )
                  (88 3 23 0 0 0 )
                  (88 4 21 0 0 0 )
                  (88 5 20 0 0 0 )
                  (88 6 22 0 0 0 )
                  (88 7 21 0 0 0 )
                  (88 8 23 0 0 0 )
                  (88 9 22 0 0 0 )
                  (88 10 20 0 0 0 )
                  (88 11 22 0 0 0 )
                  (88 12 21 0 0 0 )
                  (89 1 23 0 0 0 )
                  (89 2 20 0 0 0 )
                  (89 3 21 0 0 0 )
                  (89 4 20 0 0 0 )
                  (89 5 23 0 0 0 )
                  (89 6 22 0 0 0 )
                  (89 7 21 0 0 0 )
                  (89 8 23 0 0 0 )
                  (89 9 21 0 0 0 )
                  (89 10 23 0 0 0 )
                  (89 11 22 0 0 0 )
                  (89 12 20 0 0 0 )
                  ))
           t)
          (t nil)))

               


(de saute-un-dernier-jour-de-liquidation? (old-date date)
    (cond ((any '(lambda (x)(and (time->  x old-date)
                                 (time->= date x)))
                '((88 1 29 0 0 0 )
                  (88 2 29 0 0 0 )
                  (88 3 31 0 0 0 )
                  (88 4 29 0 0 0 )
                  (88 5 31 0 0 0 )
                  (88 6 30 0 0 0 )
                  (88 7 29 0 0 0 )
                  (88 8 31 0 0 0 )
                  (88 9 30 0 0 0 )
                  (88 10 28 0 0 0 )
                  (88 11 30 0 0 0 )
                  (88 12 30 0 0 0 )
                  (89 1 31 0 0 0 )
                  (89 2 28 0 0 0 )
                  (89 3 31 0 0 0 )
                  (89 4 28 0 0 0 )
                  (89 5 31 0 0 0 )
                  (89 6 30 0 0 0 )
                  (89 7 31 0 0 0 )
                  (89 8 31 0 0 0 )
                  (89 9 29 0 0 0 )
                  (89 10 31 0 0 0 )
                  (89 11 30 0 0 0 )
                  (89 12 39 0 0 0 )
                  ))
           t)
          (t nil)))





; un ordre est de la forme (achat 10 action-3 220.5) ou (vente 100 action-4 1531.)
; ou  (achat 10 action-3 220.5 ri) ou (vente 100 action-4 1531. ri)

(de liste-d-ordres-valorisation (liste-d-ordres)
    (apply '+ (mapcar '(lambda (x)
                         (* (cond((eq (car x) 'achat) 1.)
                                 (t -1.))
                            (cadr x)
                            (cadddr x)))
                      liste-d-ordres)))

(de compte-depouillement (compte liste-d-ordre)
    (prog ((liquidites (get-slot-value compte 'liquidites))
           (portefeuille (get-slot-value compte 'portefeuille))
           (instance-liquidation (get-slot-value compte 'instance-liquidation))
           couple)
          (mapc '(lambda (x) (setq action (caddr x))
                   (cond ((and (eq (get-slot-value action 'marche) 'reglement-mensuel)
                               (or (null (cddr (cddr x)))
                                   (not (eq (caddr (cddr x)) 'ri))))
                          (setq couple (depouillement-elementaire-rm liquidites portefeuille x instance-liquidation)))
                         (t
                          (setq couple (depouillement-elementaire liquidites portefeuille x instance-liquidation))))
                   
                   (setq liquidites (car couple))
                   (setq portefeuille (cadr couple))
                   (setq instance-liquidation (caddr couple)))
                
                liste-d-ordre)
          (setf (get-slot-value compte 'liquidites) liquidites)
          (setf (get-slot-value compte 'portefeuille) portefeuille)
          (setf (get-slot-value compte 'instance-liquidation) instance-liquidation)
          
          )) 

(de depouillement-elementaire (liquidites portefeuille-1 ordre instance-liquidation)
    (prog (lassoc (portefeuille (copy portefeuille-1)))
          (setq lassoc (assoc (caddr ordre) portefeuille ))
          (cond ((null lassoc)
                 (when (eq (car ordre) 'vente) 
                       (return (list (+ liquidites (* (cadr ordre) (cadddr ordre)))
                                     (cons (list (caddr ordre) (- (cadr ordre)))
                                           portefeuille)
                                     instance-liquidation)))
                 (when (eq (car ordre) 'achat) 
                       (return (list (- liquidites (* (cadr ordre) (cadddr ordre)))
                                     (cons (list (caddr ordre) (cadr ordre))
                                           portefeuille)
                                     instance-liquidation)))
                 )
                (t
                 (when (eq (car ordre) 'vente) 
                       (rplacd lassoc (list (- (cadr lassoc) (cadr ordre))))
                       (return (list (+ liquidites (* (cadr ordre) (cadddr ordre)))
                                     portefeuille
                                     instance-liquidation)))
                                           
                 (when (eq (car ordre) 'achat) 
                       (rplacd lassoc (list (+ (cadr lassoc) (cadr ordre))))
                       (return (list (- liquidites (* (cadr ordre) (cadddr ordre)))
                                     portefeuille
                                     instance-liquidation)))
                 ))))
                 
                 



(de depouillement-elementaire-rm (liquidites portefeuille ordre instance-liquidation)
    (list liquidites
          portefeuille
          (cons ordre instance-liquidation)
          ))


(de compte-valorisation-a-l-ouverture (compte)
    (let ((liquidites (get-slot-value compte 'liquidites))
          (portefeuille (get-slot-value compte 'portefeuille))
          (instance-reglement-espece (get-slot-value compte 'instance-reglement-espece))
          (emprunts (get-slot-value compte 'emprunts))
          (instance-liquidation (get-slot-value compte 'instance-liquidation))
          (evaluation-du-portefeuille 0.) (evaluation-des-ordres-en-instance 0.))

      (mapc '(lambda (x1) 
               (setq evaluation-du-portefeuille (+ evaluation-du-portefeuille
                                                   (* (get-slot-value (car x1) 'premier-cours)
                                                      (cadr x1)))))
            portefeuille)

      (mapc '(lambda (x1) 
               (setq evaluation-des-ordres-en-instance (+ evaluation-des-ordres-en-instance
                                                          (* (cond ((eq (car x1) 'achat) 1.)
                                                                   (t -1.))
                                                             (- (get-slot-value (caddr x1) 'premier-cours) 
                                                                (cadddr x1))
                                                             (cadr x1)))))
            instance-liquidation)
     ; (print "liquidites = " liquidites)
     ; (print " instance-reglement-espece = " instance-reglement-espece)
     ; (print " evaluation-du-portefeuille = " evaluation-du-portefeuille)
     ; (print " evaluation-des-ordres-en-instance = " evaluation-des-ordres-en-instance)
     ; (print " emprunts = " emprunts)
     ; (print " valorisation a l ouverture = "   (+ liquidites
     ;                                              instance-reglement-espece
     ;                                              evaluation-du-portefeuille
     ;                                              evaluation-des-ordres-en-instance
     ;                                              (* emprunts -1.)))
     ; (print " = " )
      

      (+ liquidites
         instance-reglement-espece
         evaluation-du-portefeuille
         evaluation-des-ordres-en-instance
         (* emprunts -1.))))
      
(de compte-suspens-a-payer (compte)
    (let ((instance-reglement-espece (get-slot-value compte 'instance-reglement-espece))
          (instance-liquidation (get-slot-value compte 'instance-liquidation))
          (emprunts (get-slot-value compte 'emprunts))
          (evaluation-des-ordres-en-instance 0.))  
      (mapc '(lambda (x1) 
               (setq evaluation-des-ordres-en-instance (+ evaluation-des-ordres-en-instance
                                                          (* (cond ((eq (car x1) 'achat) 1.)
                                                                   (t -1.))
                                                             (cadddr x1)
                                                             (cadr x1)))))
            instance-liquidation)
      (+ emprunts
         (- evaluation-des-ordres-en-instance
            instance-reglement-espece))))
