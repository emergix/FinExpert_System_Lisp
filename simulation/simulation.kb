;objects et fonctions relatives aux simulations

(add-knowledge-base 'simulation-kb
                    'object-de-base
                    '(simulation parametre moyen-de-financement marche)
                    nil)

;******************************************************************************************
;                               SIMULATION
;******************************************************************************************

(user-instanciate 'metaclass 'simulation nil)
(add-slot-user 'simulation 'date-de-debut 'instance)          ;a fixer
(add-slot-user 'simulation 'date-de-fin 'instance)            ;a fixer
(add-slot-user 'simulation 'action-de-reference 'instance)    ;a fixer
(add-slot-user 'simulation 'liste-des-parametres 'instance)   ;a fixer
(add-slot-user 'simulation 'liste-des-acteurs 'instance)      ;a fixer
(add-slot-user 'simulation 'liste-des-marches 'instance)      ;a fixer
(add-slot-user 'simulation 'liste-des-comptes 'instance)      ;a fixer
(add-attribute-user 'simulation 'liste-des-dates-de-bourse 'simulation-liste-des-dates-de-bourse 'instance)
(add-slot-user 'simulation 'date-courante 'instance)
(add-slot-user 'simulation 'moyen-de-financement 'instance)   ;a fixer
(add-slot-user 'simulation 'forward-chainer 'instance)        ;a fixer
(add-slot-user 'simulation 'numero-du-step 'instance)
(add-slot-user 'simulation 'delta-date 'instance)
(add-slot-user 'simulation 'fonction-de-trace 'instance)      ;a fixer la fonction  est d argument (simulation i date delta-date)
(add-slot-user 'simulation 'step-by-step 'instance)           ;vaut nil ou t

(setq *simulation-courante* nil)

(add-method 'simulation 'simulation-start 'start 'superseed)
(add-method 'simulation 'simulation-initialize 'initialize 'superseed)

(de simulation-initialize (simulation)
    (mapc '(lambda (x) ($ x 'initialize))
          (append (get-slot-value simulation 'liste-des-parametres)
                  (get-slot-value simulation 'liste-des-acteurs)
                  (get-slot-value simulation 'liste-des-marches)
                  (get-slot-value simulation 'liste-des-comptes))))
    


(de simulation-liste-des-dates-de-bourse (simulation slot)
    (prog ((date-de-debut (get-slot-value simulation 'date-de-debut))
           (date-de-fin (get-slot-value simulation 'date-de-fin))
           (courbe (get-slot-value 
                    (get-slot-value 
                     (get-slot-value simulation 'action-de-reference) 
                     'historique-quotidien ) 
                    'premier-cours))
           h l (v 0) ll )
          (setq h (get-slot-value courbe 'body))
	  (setq l (get-slot-value courbe 'pointeur-max))
	  loop
	  (when (> v l) (return ll))
	  (when (and (time->= (car (vref h (- l v))) date-de-debut)
                     (time-<= (car (vref h (- l v))) date-de-fin))
                (setq ll (cons (car (vref h (- l v))) ll)))
	  (setq v (1+ v))
	  (go loop)))

(de simulation-start (simulation)
    (prog ((liste-des-dates-de-bourse (user-get-value simulation 'liste-des-dates-de-bourse))
           date-courrante assoc-liste-des-parametres liste-de-dates  date-courante (i -1)
           (forward-chainer (get-slot-value simulation 'forward-chainer))simulation-save delta-date)
          (setq simulation-save *simulation-courante*)
          (setq *simulation-courante* simulation)

          (mapc '(lambda (x)
                   (let (cc)
                     (setq cc (user-instanciate 'courbe-2d nil nil))
                     (setf (get-slot-value cc 'body)   
                           (makevector (length liste-des-dates-de-bourse)  nil))
                     (setf (get-slot-value cc 'pointeur-max) 
                           (1-  (length liste-des-dates-de-bourse)))
                     (setf (get-slot-value cc 'xtype) 'date)
                     (setf (get-slot-value cc 'ytype)
                           (get-slot-value x 'ytype) )
                     (setf (get-slot-value cc 'transformation) 
                           (list 'parametre x))
                              
                     (setf (get-slot-value x 'courbe-resultat) cc)
                     ))
                (get-slot-value simulation 'liste-des-parametres))
          (setq liste-de-dates liste-des-dates-de-bourse)
          loop
          (when (null liste-de-dates)(go fin))
          (setq date-courrante (car liste-de-dates))
          (setq liste-de-dates (cdr liste-de-dates))
          (setq i (1+ i))
          (setf (get-slot-value simulation 'numero-du-step) i)
          (when (get-slot-value simulation 'date-courante)
                (setq delta-date (- (convert-time date-courrante )
                                    (convert-time (get-slot-value simulation 'date-courante)))))
          (setf (get-slot-value simulation 'delta-date) delta-date)
          (setf (get-slot-value simulation 'date-courante) date-courrante)
          (print " cas " i)
          (mapc '(lambda (x) ($ x 'set-date date-courrante))
                
                (get-slot-value simulation 'liste-des-acteurs))
          (mapc '(lambda (x) ($ x 'set-date date-courrante)) 
                
                (get-slot-value simulation 'liste-des-parametres))
          (mapc '(lambda (x) ($ x 'set-date date-courrante)) 
                
                (get-slot-value simulation 'liste-des-marches))
          (mapc '(lambda (x) ($ x 'set-date date-courrante)) 
                
                (get-slot-value simulation 'liste-des-comptes))
          ($ (get-slot-value simulation 'moyen-de-financement) 'set-date date-courrante)
          (when forward-chainer
               
                
               (cond ((consp forward-chainer) 
                      (mapc '(lambda (fc)
                               (setf (get-slot-value fc 'simulation) simulation)
                               ($ fc 'go))
                            forward-chainer))
                     (t (when (get-slot forward-chainer 'simulation)
                               (setf (get-slot-value forward-chainer 'simulation) simulation)
                                ($ forward-chainer 'go)))
                     ))
          (when delta-date 
                (mapc '(lambda (x) ($ x 'actualisation 
                                      (+ 1. (* delta-date (/ (get-slot-value 
                                                              (get-slot-value simulation 'moyen-de-financement)
                                                              'taux-courant) 
                                                             36500.)))))
                      (get-slot-value simulation 'liste-des-marches)))
          (mapc '(lambda (x) ($ x 'compute-value i))
                (get-slot-value simulation 'liste-des-parametres))
          (mapc '(lambda (x)
                   (let ((liquidites (get-slot-value x 'liquidites))
                         (emprunts (get-slot-value x 'emprunts)))
                   
                     (when (and delta-date
                                (> emprunts 0.))
                           (setq emprunts (* emprunts (+ 1. (* delta-date (/ (get-slot-value 
                                                                              (get-slot-value simulation 'moyen-de-financement)
                                                                              'taux-courant-d-emprunt) 
                                                                             36500.))))))
                     (when (and delta-date
                                (> liquidites 0.))
                           (setq liquidites (* liquidites (+ 1. (* delta-date (/ (get-slot-value 
                                                                                  (get-slot-value simulation 'moyen-de-financement)
                                                                                  'taux-courant-de-placement) 
                                                                                 36500.))))))
                     (when (< liquidites 0.)
                           (setq emprunts (+  emprunts (- liquidites)))
                           (setq liquidites 0.))
                     (cond ((and (> liquidites 0.)
                                 (> emprunts 0.)
                                 (< emprunts liquidites))
                            (setq liquidites (- liquidites emprunts))
                            (setq emprunts 0.)
                            )
                           ((and (> liquidites 0.)
                                 (> emprunts 0.)
                                 (>= emprunts liquidites))
                            (setq emprunts (- emprunts liquidites))
                            (setq liquidites 0.)
                            ))
                     
                     (setf (get-slot-value x 'liquidites) liquidites)
                     (setf (get-slot-value x 'emprunts) emprunts)))
                (get-slot-value simulation 'liste-des-comptes))
          (mapc '(lambda (x)
                   (user-get-value x 'investissements-net-courant )
                   (user-get-value x 'investissements-net-cummule-courant) 
                   (user-get-value x 'volume-des-transactions-courant)
              )
                (get-slot-value simulation 'liste-des-marches))
          (funcall (get-slot-value simulation 'fonction-de-trace) simulation i date-courante delta-date)
          (go loop)
          fin
          
                
          (setq *simulation-courante* simulation-save)
          ))


;******************************************************************************************
;                                        PARAMETRE
;******************************************************************************************


(user-instanciate 'metaclass 'parametre nil)
(add-slot-user 'parametre 'nom 'instance)                    ;a fixer optionnel
(add-slot-user 'parametre 'fonction-de-calcul 'instance)     ;a fixer
(add-slot-user 'parametre 'valeur-initiale 'instance)        ;a fixer optionnel
(add-slot-user 'parametre 'courbe-resultat 'instance)
(add-slot-user 'parametre 'date-courante 'instance)
(add-slot-user 'parametre 'simulation 'instance)             ;a fixer
(add-slot-user 'parametre 'valeur-courante 'instance)
(add-slot-user 'parametre 'ytype 'instance)

(add-method 'parametre 'parametre-compute-value 'compute-value 'superseed)
(add-method 'parametre 'parametre-initialize 'initialize 'superseed)
(add-method 'parametre 'parametre-set-date 'set-date 'superseed)

(de parametre-initialize (parametre)
    (setf (get-slot-value parametre 'valeur-courante) nil))

(de parametre-get-value-n-1 (parametre)
    (prog ((historique (get-slot-value (get-slot-value parametre 'courbe-resultat) 'body))
           (simulation (get-slot-value parametre 'simulation))
           step ran)
          (setq step (get-slot-value simulation 'numero-du-step))
          (cond ((equal  step 0) (return nil))
                (t (return (cadr (vref historique (1- step))))))))
    

(de parametre-set-date (parametre date)
    (setf (get-slot-value parametre 'date-courante) date))

(de parametre-compute-value (parametre i) 
    (setf (get-slot-value parametre 'valeur-courante)
          (apply (get-slot-value parametre 'fonction-de-calcul) (list parametre)))
    (setf (vref (get-slot-value (get-slot-value parametre 'courbe-resultat) 'body) i)
          (list (get-slot-value parametre 'date-courante)
                (get-slot-value parametre 'valeur-courante))))
    
 


;******************************************************************************************
;                      MOYEN-DE-FINANCEMENT
;******************************************************************************************


(user-instanciate 'metaclass 'moyen-de-financement nil)
(add-slot-user 'moyen-de-financement 'taux-courant 'instance)
(add-slot-user 'moyen-de-financement 'taux-courant-d-emprunt 'instance)
(add-slot-user 'moyen-de-financement 'taux-courant-de-placement 'instance)
(add-slot-user 'moyen-de-financement 'date-courante 'instance)
(add-slot-user 'moyen-de-financement 'courbe 'instance)

(add-method 'moyen-de-financement 'moyen-de-financement-set-date 'set-date 'superseed)

(de moyen-de-financement-set-date (moyen date)
    (setf (get-slot-value moyen 'date-courante) date)
    (setf (get-slot-value moyen 'taux-courant)
          (courbe-2d-interpolation (get-slot-value moyen 'courbe) date))
    (setf (get-slot-value moyen 'taux-courant-d-emprunt)
          (+ (get-slot-value moyen 'taux-courant) .0025))
    (setf (get-slot-value moyen 'taux-courant-de-placement)
          (- (get-slot-value moyen 'taux-courant) .0025))
 ;(setf (get-slot-value moyen 'taux-courant) 0.0)
 ;(setf (get-slot-value moyen 'taux-courant-d-emprunt) 0.0)
 ;(setf (get-slot-value moyen 'taux-courant-de-placement) 0.0)
    )
    
;chargement du taux-courant

(user-instanciate 'moyen-de-financement 'marche-monetaire nil)
(setf (get-slot-value 'marche-monetaire 'courbe) 
      (fetch-courbe-exceptionnel-from-current-directory "monetaire-q" ".courbe-2d"))
          

;******************************************************************************************
;                       MARCHE
;******************************************************************************************



(user-instanciate 'metaclass 'marche nil)
(add-slot-user 'marche 'liste-des-actions 'instance)
(add-slot-user 'marche 'date-courante 'instance)
(add-slot-user 'marche 'liste-des-ordres-courants 'instance)
(add-slot-user 'marche 'modele-de-marche 'instance)

; le modele de marche recoit une fonction ('achat-ou-vente volume action heure) 
; qui donne en retour le cours auquel s est effectue l echange

(add-attribute-user 'marche 'investissements-net-courant 
                    'marche-investissements-net-courant 'instance)
(add-attribute-user 'marche 'investissements-net-cummule-courant 
                    'marche-investissements-net-cummule-courant  'instance)
(add-attribute-user 'marche 'volume-des-transactions-courant 
                    'marche-volume-des-transactions-courant 'instance)

    
(add-method 'marche 'marche-portefeuille-au-mieux 'portefeuille-au-mieux 'superseed)

(add-method 'marche 'marche-set-date 'set-date 'superseed)
(add-method 'marche 'marche-actualisation 'actualisation 'superseed)
(add-method 'marche 'marche-vente-au-mieux 'vente-au-mieux 'superseed)
(add-method 'marche 'marche-achat-au-mieux 'achat-au-mieux 'superseed)
(add-method 'marche 'marche-initialize 'initialize 'superseed)

(add-post-instanciation-demon marche 'initialisation-du-marche 'merge-before)

(de marche-initialize (marche)
    (undetermine marche 'volume-des-transactions-courant )
    (undetermine marche 'investissements-net-cummule-courant)
    (undetermine marche 'investissements-net-courant)
    (setf (get-slot-value marche 'volume-des-transactions-courant ) 0.)
    (setf (get-slot-value marche 'investissements-net-cummule-courant) 0.)
    (setf (get-slot-value marche 'investissements-net-courant) 0.)
    (setf (get-slot-value marche 'liste-des-ordres-courants) nil))



(de marche-investissements-net-courant (marche slot)
    (let ((liste-des-ordres (get-slot-value marche 'liste-des-ordres-courants)))
      (apply '+ (mapcar '(lambda (x) (cond ((eq (car x) 'achat)
                                            (* (cadr x) (cadddr x)))
                                           (t (* -1. (cadr x) (cadddr x)))))
                        liste-des-ordres))))

(de marche-investissements-net-cummule-courant (marche slot)
    (let ((old-value (get-slot-value marche slot))
          (investissement (user-get-value marche 'investissements-net-courant))
          )
      (cond ((null old-value) investissement)
            (t (+ old-value investissement)))))        

(de marche-volume-des-transactions-courant (marche slot)
    (let ((liste-des-ordres (get-slot-value marche 'liste-des-ordres-courants)))
      (apply '+ (mapcar '(lambda (x) (* (cadr x) (cadddr x)))
                        liste-des-ordres))))

(de marche-action-achat-au-mieux (marche compte nb action heure)
    (let ((modele (get-slot-value marche 'modele-de-marche)) cours)
          
      (setq cours (funcall modele 'achat nb action heure))
      (setf (get-slot-value marche 'liste-des-ordres-courants)
            (cons (list 'achat nb action cours)
                  (get-slot-value marche 'liste-des-ordres-courants)))
      (undetermine marche 'volume-des-transactions-courant )
      (undetermine marche 'investissements-net-cummule-courant)
      (undetermine marche 'investissements-net-courant)
      ($ compte 'depouillement (list (list 'achat nb action cours)))))

(de marche-action-vente-au-mieux (marche compte nb action heure)
    (let ((modele (get-slot-value marche 'modele-de-marche)) cours)
          
      (setq cours (funcall modele 'vente nb action heure))
      (setf (get-slot-value marche 'liste-des-ordres-courants)
            (cons (list 'vente nb action cours)
                  (get-slot-value marche 'liste-des-ordres-courants)))
      (undetermine marche 'volume-des-transactions-courant )
      (undetermine marche 'investissements-net-cummule-courant)
      (undetermine marche 'investissements-net-courant)
      ($ compte 'depouillement (list (list 'vente nb action cours)))))


    
(de marche-panier-achat-au-mieux (marche compte montant panier heure)
    (let ((liste-d-ordres (panier-ordres-equivalents 'achat marche panier montant heure)))
;(print "liste d ordre : " liste-d-ordres)
      (setf (get-slot-value marche 'liste-des-ordres-courants)
            (append liste-d-ordres
                    (get-slot-value marche 'liste-des-ordres-courants)))
      (undetermine marche 'volume-des-transactions-courant )
      (undetermine marche 'investissements-net-cummule-courant)
      (undetermine marche 'investissements-net-courant)
      ($ compte 'depouillement liste-d-ordres )))


(de marche-portefeuille-au-mieux (marche compte portefeuille heure)
    (let (liste-d-ordres (modele (get-slot-value marche 'modele-de-marche)))
      (setq liste-d-ordres (mapcar '(lambda (x) (cond((< (cadr x) 0.) 
                                                      (list 'vente (- (cadr x)) (car x)  
                                                            (funcall modele 'vente (- (cadr x)) (car x) heure)))
                                                     (t 
                                                      (list 'achat (cadr x) (car x)  
                                                            (funcall modele 'achat (cadr x) (car x) heure)))
                                                     ))
                                   portefeuille))
      (setf (get-slot-value marche 'liste-des-ordres-courants)
            (append liste-d-ordres
                    (get-slot-value marche 'liste-des-ordres-courants)))
      (undetermine marche 'volume-des-transactions-courant )
      (undetermine marche 'investissements-net-cummule-courant)
      (undetermine marche 'investissements-net-courant)
      ($ compte 'depouillement liste-d-ordres )))

    

    
(de marche-panier-vente-au-mieux (marche compte montant panier heure)
    (let ((liste-d-ordres (panier-ordres-equivalents 'vente marche panier montant heure)))
;(print "liste d ordre : " liste-d-ordres)
      (setf (get-slot-value marche 'liste-des-ordres-courants)
            (append liste-d-ordres
                    (get-slot-value marche 'liste-des-ordres-courants)))
      (undetermine marche 'volume-des-transactions-courant )
      (undetermine marche 'investissements-net-cummule-courant)
      (undetermine marche 'investissements-net-courant)
      ($ compte 'depouillement liste-d-ordres )))



(de marche-vente-au-mieux (marche compte qte  instrument heure)
    (cond ((is-a instrument 'panier) 
           (marche-panier-vente-au-mieux marche compte qte instrument heure))
          ((is-a instrument 'action)
           (marche-action-vente-au-mieux marche compte qte instrument heure))))



(de marche-achat-au-mieux (marche compte qte  instrument heure)
    (cond ((is-a instrument 'panier) 
           (marche-panier-achat-au-mieux marche compte qte instrument heure))
          ((is-a instrument 'action)
           (marche-action-achat-au-mieux marche compte qte instrument heure))))


(de initialisation-du-marche (marche)
    (setf (get-slot-value marche 'investissements-net-cummule-courant) 0.)
    )

(de marche-actualisation (marche facteur)
    (when (get-slot-value marche 'investissements-net-cummule-courant)
          (setf (get-slot-value marche 'investissements-net-cummule-courant)
                (* facteur (get-slot-value marche 'investissements-net-cummule-courant)))))
    
(de marche-set-date (marche date)
    (setf (get-slot-value marche 'liste-des-ordres-courants) nil)
   (undetermine marche 'liste-des-ordres-courants)
   (setf (get-slot-value marche 'investissements-net-courant) nil)
   (undetermine marche 'investissements-net-courant)
   (undetermine marche 'investissements-net-cummule-courant)
   (setf (get-slot-value marche 'volume-des-transactions-courant) nil)
   (undetermine marche 'volume-des-transactions-courant )
   (user-put-value marche 'date-courante date))

(de modele-standart-de-marche (sens nb action heure)
    (let ((plus-haut (get-slot-value action 'plus-haut))
          (plus-bas (get-slot-value action 'plus-bas))
          (premier-cours (get-slot-value action 'premier-cours))
          (dernier-cours (get-slot-value action 'dernier-cours))
          (volume (get-slot-value action 'volume)))
      (* (/ (+ (* premier-cours (- 17. heure))
               (* dernier-cours (- heure 10.))) 
            7.)
         (+ 1. (* (cond ((<= heure 10.01) 0.02)
                        (t 0.04))
                  (cond ((eq sens 'achat) 1.)
                        (t -1.))
                  0.
                  (/ nb volume))))))


; FONCTION QUI AGISSENT SUR DES PORTEFEUILLES DE LA FORME : ((AQ 130) (EN 70) ... (FF 700)) 

(de portefeuille-moins (p1 p2)
    (prog ((p3 (copy p2)))
          (append (mapcan '(lambda (x)
                             (let (valem)
                               (setq valem (assoc (car x) p1))
                               (cond((and valem
                                          (equal (cadr valem) (cadr x)))
                                     nil)
                                    (valem
                                     (list (list (car x) (- (cadr valem) (cadr x)) )))
                                    (t (list (list (car x) (- (cadr x))))))
                               ))
                          p3)
                  (mapcan '(lambda (x) 
                             (let (valem)
                               (setq valem (assoc (car x) p2))
                               (cond(valem nil)
                                    (t (list x)))))
                          (copy p1)))
          ))


    
(de portefeuille-plus (p1 p2)
    (prog ((psom (copy p1)) elem)
          (mapc '(lambda (y)
                   (cond ((setq elem (assoc (car y ) psom))
                          (rplacd elem (list (+ (cadr elem) (cadr y)))))
                         (t (setq psom (cons y psom)))))
                p2)
         (return psom)))

