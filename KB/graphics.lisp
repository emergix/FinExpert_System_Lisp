;fichier contenant les objects et fonctions interragissant avec les graphismes associes aux raisonnements


; relatif aux savoir-faire des canaux , triangles et droites-techniques 

;ces deux fonctions sont utilisees par courb-extremum-find-droite-2



                                               


(de rajoute-droite-graphique (droite-technique x)
    (prog (appli c appli1 (libelle *contexte-d-analyse*))
          (when (eq (get-slot-value expert-canal 'representation-graphique) nil) (return))
          (when (eq (get-slot-value expert-canal 'representation-graphique-transitoire) t) (return))
          (setq c (car (get-slot-value expert-canal 'graphique-liste-des-objects-affiches)))
          (cond((eq (get-slot-value expert-canal 'graphique-incremental) t)
                (setf (get-slot-value expert-canal 'graphique) 
                      (setq appli1 (display-courbe-a 
                                      (catenate "expert-canal : canavex : " libelle)
                                      (list  c droite-technique))))
                (impose-abscisse-designee appli1 x)
                (process-pending-events)
                (wait-a-step)
                (setf (get-slot-value expert-canal 'graphique-liste-des-objects-affiches) 
                      (list c droite-technique )))
               ((eq (get-slot-value expert-canal 'graphique-incremental) nil)
                (setf (get-slot-value expert-canal 'graphique) 
                      (setq appli1 (display-courbe-a 
                                    (catenate "expert-canal : canavex : " libelle)
                                    (append
                                              (get-slot-value expert-canal 'graphique-liste-des-objects-affiches )
                                              (list droite-technique)))))
                (impose-abscisse-designee appli1 x)
                (process-pending-events)
                (wait-a-step)
                (setf (get-slot-value expert-canal 'graphique-liste-des-objects-affiches) 
                      (append  (get-slot-value expert-canal 'graphique-liste-des-objects-affiches )
                               (list droite-technique ))))
               )))


(de enleve-droite-graphique (droite-technique)
    (prog (appli c appli1 (libelle *contexte-d-analyse*))

          (when (eq (get-slot-value expert-canal 'representation-graphique) nil) (return))
          (when (eq (get-slot-value expert-canal 'representation-graphique-transitoire) t) (return))
          (setq c (car (get-slot-value expert-canal 'graphique-liste-des-objects-affiches)))
          (cond
               ((eq (get-slot-value expert-canal 'graphique-incremental) nil)
                (setf (get-slot-value expert-canal 'graphique) 
                      (setq appli1 (display-courbe-a
                                      (catenate "expert-canal : canavex : " libelle)
                                      (remq droite-technique
                                                           (get-slot-value expert-canal 'graphique-liste-des-objects-affiches )
                                                           ))))
                (process-pending-events)
                (wait-a-step)
                (setf (get-slot-value expert-canal 'graphique-liste-des-objects-affiches) 
                      (remq droite-technique 
                            (get-slot-value expert-canal 'graphique-liste-des-objects-affiches )
                            )))
               )))



(de montre-droite-graphique (droite-technique x)
    (prog (appli c appli1 (libelle *contexte-d-analyse*))

          (when (eq (get-slot-value expert-canal 'representation-graphique) nil) (return))
          (when (eq (get-slot-value expert-canal 'representation-graphique-transitoire) nil) (return))
          (setq c (car (get-slot-value expert-canal 'graphique-liste-des-objects-affiches)))
          (setf (get-slot-value expert-canal 'graphique) 
                (setq appli1 (display-courbe-a 
                                (catenate "expert-canal : canavex : " libelle)
                                (list  c droite-technique))))
          (impose-abscisse-designee appli1 x)
          (process-pending-events)
          (wait-a-step)
          (setf (get-slot-value expert-canal 'graphique-liste-des-objects-affiches) 
                (list c droite-technique ))))
 

 
(add-method 'expert 'expert-create-droite 'create-droite 'superseed)
(add-method 'expert 'expert-show-droite 'show-droite 'superseed)
(add-method 'expert 'expert-distance-object-curseur 'distance-object-curseur 'superseed)
(add-method 'expert 'expert-distance-object-point 'distance-object-point 'superseed)
(add-method 'expert 'expert-distance-object-object 'distance-object-object 'superseed)
(add-method 'expert 'expert-show-extremums 'show-extremums 'superseed)
(add-method 'expert 'expert-show-extremums-niveau-2 'show-extremums-niveau-2 'superseed)
(add-method 'expert 'expert-show-extremums-niveau-3 'show-extremums-niveau-3 'superseed)
(add-method 'expert 'expert-show-extremums-niveau-4 'show-extremums-niveau-4 'superseed)
(add-method 'expert 'expert-show-droite-liste-d-extremums 'show-droite-liste-d-extremums 'superseed)
(add-method 'expert 'expert-droite-la-plus-proche 'droite-la-plus-proche 'superseed)
(add-method 'expert 'expert-montre-droite 'montre-droite 'superseed)


(de expert-create-droite (expert)
     (prog (liste-de-point)
          (setq liste-de-point (recupere-liste-points (get-slot-value expert 'graphique)))
          (print "liste-de-points =" liste-de-point)
          (when ( < (length liste-de-point) 2) (return nil))
          (bipoint-droite-associee (car liste-de-point)
                                   (cadr liste-de-point) 
                                   (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))))
    )


(de expert-show-droite (expert)
    (prog (courbe menu-liste menu droite-choisie)
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu-liste (mapcan '(lambda (x) (cond ((eq (get-fondamental-value x 'courbe-origine) courbe)
                                                       (list (string x) x))
                                                      (t nil)))
                                   (get-all-instances 'droite-technique)))
          (setq menu (apply 'create-menu (cons  "-----droites----" menu-liste)))
          (read-mouse)
          (setq droite-choisie (activate-menu menu #:mouse:x #:mouse:y))
          (when (null droite-choisie) (return))
          (print "liste-des-object ="  (get-slot-value expert 'graphique-liste-des-objects-affiches))
          (setf (get-slot-value expert 'graphique-liste-des-objects-affiches)
                (cons courbe
                      (cons droite-choisie 
                            (cdr (get-slot-value expert 'graphique-liste-des-objects-affiches)))))
          (setf (get-slot-value expert 'graphique) 
                (apply (cond ((eq expert 'expert-canal) 'display-courbe-a)
                             ((eq expert 'expert-fourier) 'display-courbe-b)
                             ((eq expert 'expert-elliott) 'display-courbe-c)
                             ((eq expert 'expert) 'display-courbe-d))
                       (list   (catenate "expert-canal : canavex : " libelle)
                        (cons courbe
                              (cons droite-choisie 
                                    (cdr (get-slot-value expert 'graphique-liste-des-objects-affiches)))))))
          ({application}:expert (get-slot-value expert 'graphique) expert)))

(de expert-montre-droite (expert)
    (prog (courbe menu-liste menu droite-choisie point1 point2 premier-extremum dernier-extremum appli)
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq appli (get-slot-value expert 'graphique))
          (setq menu-liste (mapcan '(lambda (x) (cond ((eq (get-fondamental-value x 'courbe-origine) courbe)
                                                       (list (string x) x))
                                                      (t nil)))
                                   (get-all-instances 'droite-technique)))
          (setq menu (apply 'create-menu (cons  "-----droites----" menu-liste)))
          (read-mouse)
          (setq droite-choisie (activate-menu menu #:mouse:x #:mouse:y))
          (when (null droite-choisie) (return))
          (setq premier-extremum (premier-extremum (get-fondamental-value droite-choisie 'liste-d-extremums)))
          (setq dernier-extremum (dernier-extremum (get-fondamental-value droite-choisie 'liste-d-extremums)))
          (efface-liste-points appli)
         
          (impose-abscisse-designee appli (get-fondamental-value premier-extremum 'rang))
          (final-set-the-mark appli)
          (impose-abscisse-designee appli (get-fondamental-value dernier-extremum 'rang))
          (final-set-the-mark appli)))

(de final-set-the-mark (appli)
    (let* ( (xy (vref ({curveapplication}:scale appli) ({curveapplication}:index appli)))
            (editor ({curveapplication}:editor appli)))
      (send 'eventx editor
            (fix (* ({curveapplication}:scalex appli)
                    (- (car xy) ({curveapplication}:transx appli)))))
      (send 'eventy editor
            (fix (* ({curveapplication}:scaley appli)
                    (- (cadr xy) ({curveapplication}:transy appli)))))
      (send 'activated-event editor ())))



(de expert-droite-la-plus-proche (expert)
    (prog (point-choisi m-droite liste-de-droites courbe liste-de-points)
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq liste-de-droites (mapcan '(lambda (x) (cond ((eq (get-fondamental-value x 'courbe-origine) courbe) (list x))
                                                            (t nil)))
                                         (get-all-instances 'droite-technique)))
          (setq liste-de-points (recupere-liste-points (get-slot-value expert 'graphique)))
          (when ( < (length liste-de-points) 1) (return nil))
          (setq point-choisi (car liste-de-points))
          (when (null liste-de-droites) (return nil))
          (setq m-droite (car liste-de-droites))
          (setq liste-de-droites (cdr liste-de-droites))
          loop
          (when (null liste-de-droites) (print "la droite la plus proche du point choisi est : " m-droite) (return nil))
          (when (< (distance-y-point-droite (list (car point-choisi) (cdr point-choisi))  (car liste-de-droites))
                   (distance-y-point-droite (list (car point-choisi) (cdr point-choisi))  m-droite))
                (setq m-droite (car liste-de-droites)))
          (setq liste-de-droites (cdr liste-de-droites))
          (go loop)))

(de distance-y-point-droite (point droite)
    (prog ((pente (get-fondamental-value droite 'pente)) (ordonnee-zero (get-fondamental-value droite 'ordonnee-zero)))
          (setq y1 (+ (* (car point) pente) ordonnee-zero))
          (return (abs (- y1 (cadr point))))))

(de expert-distance-object-curseur (expert)
    (prog (courbe menu-liste menu object-choisi appli point-choisi-1 point-choisi abcisse)
          (setq appli (get-slot-value expert 'graphique))
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu-liste (mapcan '(lambda (x) (cond ((eq (get-fondamental-value x 'courbe-origine) courbe)
                                                       (list (string x) x))
                                                      (t nil)))
                                   (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu (apply 'create-menu (cons  "-------objects------" menu-liste)))
          (read-mouse)
          (setq object-choisi (activate-menu menu #:mouse:x #:mouse:y))
          (when (null object-choisi) (return))
          (setq point-choisi (vref (get-slot-value courbe 'body) ({curveapplication}:index appli)))
          (setq point-choisi (cons (car point-choisi) (cadr point-choisi)))
          (setq abcisse (car point-choisi))
          (setq point-choisi-1  (cons abcisse (apply (cond ((is-a object-choisi 'droite-technique) 'droite-interpolation)
                                                           ((is-a object-choisi 'polygone) 'polygone-interpole)
                                                           ((is-a object-choisi 'courbe-2d) 'courbe-2d-interbole))
                                                     (list object-choisi abcisse))))
          (setq distance (norme-dy point-choisi-1 point-choisi))
          (print "<distance entre " object " et le point selectionne par le curseur " point-choisi " est : " distance ">")
         
          ))
         



(de expert-distance-object-point (expert)
    (prog (courbe menu-liste menu object-choisi liste-de-point)
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu-liste (mapcan '(lambda (x) (cond ((eq (get-fondamental-value x 'courbe-origine) courbe)
                                                       (list (string x) x))
                                                      (t nil)))
                                   (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu (apply 'create-menu (cons  "-------objects------" menu-liste)))
          (read-mouse)
          (setq object-choisi (activate-menu menu #:mouse:x #:mouse:y))
          (when (null object-choisi) (return))
          (setq liste-de-point (recupere-liste-points (get-slot-value expert 'graphique)))
          (when ( < (length liste-de-point) 1) (return nil))
          (setq point-choisi (car liste-de-point))
          (setq abcisse (car point-choisi))
          (setq point-choisi-1  (cons abcisse (apply (cond ((is-a object-choisi 'droite-technique) 'droite-interpolation)
                                                           ((is-a object-choisi 'polygone) 'polygone-interpole)
                                                           ((is-a object-choisi 'courbe-2d) 'courbe-2d-interbole))
                                                     (list object-choisi abcisse))))
          (setq distance (norme-dy point-choisi-1 point-choisi))
          (print "<distance entre " object " et le dernier point selectionne par * " point-choisi " est : " distance ">")
          ))

(de expert-distance-object-object (expert)
    (prog (courbe menu-liste menu object-choisi-1 object-choisi-2 point-choisi-1 point-choisi-2 appli abcisse)
          (setq appli (get-slot-value expert 'graphique))
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu-liste (mapcan '(lambda (x) (cond ((eq (get-fondamental-value x 'courbe-origine) courbe)
                                                       (list (string x) x))
                                                      (t nil)))
                                   (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu (apply 'create-menu (cons  "-------objects (1)------" menu-liste)))
          (read-mouse)
          (setq object-choisi-1 (activate-menu menu #:mouse:x #:mouse:y))
          (when (null object-choisi-1) (return))
          (setq menu (apply 'create-menu (cons  "-------objects (2)------" menu-liste)))
          (read-mouse)
          (setq object-choisi-2 (activate-menu menu #:mouse:x #:mouse:y))
          (when (null object-choisi-2) (return))
          (setq abcisse (recupere-abcisse-designee appli))
          (setq point-choisi-1 (cons abcisse (apply (cond ((is-a object-choisi-1 'droite-technique) 'droite-interpolation)
                                                          ((is-a object-choisi-1 'polygone) 'polygone-interpole)
                                                          ((is-a object-choisi-1 'courbe-2d) 'courbe-2d-interbole))
                                                    (list object-choisi-1 abcisse))))
          (setq point-choisi-2 (cons abcisse (apply (cond ((is-a object-choisi-2 'droite-technique) 'droite-interpolation)
                                                          ((is-a object-choisi-2 'polygone) 'polygone-interpole)
                                                          ((is-a object-choisi-2 'courbe-2d) 'courbe-2d-interbole))
                                                    (list object-choisi-2 abcisse))))
          (setq distance (norme-dy point-choisi-1 point-choisi-2))
          (print "<distance entre " object-choisi-1 " et " object-choisi-2 " est : " distance ">")
          ))

(de expert-show-extremums (expert)
    (prog (courbe menu-liste menu extremum-choisi)
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu-liste (mapcan '(lambda (x) (cond ((eq (get-fondamental-value x 'courbe) courbe)
                                                       (list (string x) x))
                                                      (t nil)))
                                   (get-all-instances 'extremum-local)))
          (setq menu (apply 'create-menu (cons  "-----extremums----" menu-liste)))
          (read-mouse)
          (setq extremum-choisi (activate-menu menu #:mouse:x (- #:mouse:y 200)))
          (when (null extremum-choisi) (return))
          (impose-abscisse-designee  (get-slot-value expert 'graphique)  (get-slot-value extremum-choisi 'rang))
          (edit-object extremum-choisi)
          ))


(de expert-show-extremums-niveau-2 (expert)
    (prog (courbe menu-liste menu extremum-choisi)
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu-liste (mapcan '(lambda (x) (cond ((and (eq (get-fondamental-value x 'courbe) courbe)
                                                            (get-fondamental-value x 'extremum-niveau-2))
                                                       (list (string x) x))
                                                      (t nil)))
                                   (get-all-instances 'extremum-local)))
          (setq menu (apply 'create-menu (cons  "-----extremums----" menu-liste)))
          (read-mouse)
          (setq extremum-choisi (activate-menu menu #:mouse:x (- #:mouse:y 200)))
          (when (null extremum-choisi) (return))
          (impose-abscisse-designee  (get-slot-value expert 'graphique)  (get-slot-value extremum-choisi 'rang))
          (edit-object extremum-choisi)
          ))
    

(de expert-show-extremums-niveau-3 (expert)
    (prog (courbe menu-liste menu extremum-choisi)
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu-liste (mapcan '(lambda (x) (cond ((and (eq (get-fondamental-value x 'courbe) courbe)
                                                            (get-fondamental-value x 'extremum-niveau-3))
                                                       (list (string x) x))
                                                      (t nil)))
                                   (get-all-instances 'extremum-local)))
          (setq menu (apply 'create-menu (cons  "-----extremums----" menu-liste)))
          (read-mouse)
          (setq extremum-choisi (activate-menu menu #:mouse:x (- #:mouse:y 200)))
          (when (null extremum-choisi) (return))
          (impose-abscisse-designee  (get-slot-value expert 'graphique)  (get-slot-value extremum-choisi 'rang))
          (edit-object extremum-choisi)
          ))

(de expert-show-extremums-niveau-4 (expert)
    (prog (courbe menu-liste menu extremum-choisi)
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          (setq menu-liste (mapcan '(lambda (x) (cond ((and (eq (get-fondamental-value x 'courbe) courbe)
                                                            (get-fondamental-value x 'extremum-niveau-4))
                                                       (list (string x) x))
                                                      (t nil)))
                                   (get-all-instances 'extremum-local)))
          (setq menu (apply 'create-menu (cons  "-----extremums----" menu-liste)))
          (read-mouse)
          (setq extremum-choisi (activate-menu menu #:mouse:x (- #:mouse:y 200)))
          (when (null extremum-choisi) (return))
          (impose-abscisse-designee  (get-slot-value expert 'graphique)  (get-slot-value extremum-choisi 'rang))
          (edit-object extremum-choisi)
          ))

(de expert-show-droite-liste-d-extremums (expert)
    (prog (courbe dliste)
          (setq courbe (car (get-slot-value expert 'graphique-liste-des-objects-affiches)))
          
          (setq dliste (mapcan '(lambda (x) (cond ((eq (get-slot-value x 'courbe) courbe) (list x))
                                                 (t nil)))
                              (get-all-instances 'droite-technique)))
          (mapc '(lambda (x) (print x " -> " (get-slot-value x 'liste-d-extremums)))
                dliste)))

   
(de norme-dy (point-1 point-2)
    (abs (- (cdr point-1) (cdr point-2))))
      
(add-method 'expert 'expert-echelle-x-plus-20 'echelle-x-plus-20 'superseed)
(add-method 'expert 'expert-echelle-x-moins-20 'echelle-x-moins-20 'superseed)
(add-method 'expert 'expert-echelle-y-plus-20 'echelle-y-plus-20 'superseed)
(add-method 'expert 'expert-echelle-y-moins-20 'echelle-y-moins-20 'superseed)


(de expert-echelle-x-plus-20 (expert)
    (prog (corrector-savex corrector-savey  expert-save)
          (setq expert-save *current-expert*)
          (setq *current-expert* expert)
          (setq corrector-savex *corrector-kx*)
          (setq corrector-savey *corrector-ky*)
          (setq *corrector-kx* (* 1.50 (get-slot-value expert 'corrector-kx)))
          (setq *corrector-ky* (get-slot-value expert 'corrector-ky))
          (setf (get-slot-value expert 'corrector-kx) *corrector-kx*)
          (setf (get-slot-value expert 'graphique) 
                (apply (cond ((eq expert 'expert-canal) 'display-courbe-a)
                             ((eq expert 'expert-elliott) 'display-courbe-b)
                             ((eq expert 'expert-fourier) 'display-courbe-c)
                             ((eq expert 'expert) 'display-courbe-d))
                       (list
                          (catenate "expert-canal : canavex : " libelle)
                          (get-slot-value expert 'graphique-liste-des-objects-affiches))))
          (setq *current-expert expert-save)
          (setq *corrector-kx* corrector-savex)
          (setq *corrector-ky* corrector-savey)
          ))

(de expert-echelle-x-moins-20 (expert)
    (prog (corrector-savex corrector-savey expert-save)
          (setq expert-save *current-expert*)
          (setq *current-expert* expert)
          (setq corrector-savex *corrector-kx*)
          (setq corrector-savey *corrector-ky*)
          (setq *corrector-kx* (/  (get-slot-value expert 'corrector-kx) 1.50))
          (setq *corrector-ky* (get-slot-value expert 'corrector-ky))
          (setf (get-slot-value expert 'corrector-kx) *corrector-kx*)
          (setf (get-slot-value expert 'graphique) 
                (apply (cond ((eq expert 'expert-canal) 'display-courbe-a)
                             ((eq expert 'expert-elliott) 'display-courbe-b)
                             ((eq expert 'expert-fourier) 'display-courbe-c)
                             ((eq expert 'expert) 'display-courbe-d))
                       (list 
                          (catenate "expert-canal : canavex : " libelle)
                          (get-slot-value expert 'graphique-liste-des-objects-affiches))))
          (setq *current-expert expert-save)
          (setq *corrector-kx* corrector-savex)
          (setq *corrector-ky* corrector-savey)
          ))

(de expert-echelle-y-plus-20 (expert)
    (prog (corrector-savex corrector-savey expert-save)
          (setq expert-save *current-expert*)
          (setq *current-expert* expert)
          (setq corrector-savex *corrector-kx*)
          (setq corrector-savey *corrector-ky*)
          (setq *corrector-kx* (get-slot-value expert 'corrector-kx))
          (setq *corrector-ky* (* 1.20 (get-slot-value expert 'corrector-ky)))
          (setf (get-slot-value expert 'corrector-ky) *corrector-ky*)
          (setf (get-slot-value expert 'graphique) 
                (apply (cond ((eq expert 'expert-canal) 'display-courbe-a)
                             ((eq expert 'expert-elliott) 'display-courbe-b)
                             ((eq expert 'expert-fourier) 'display-courbe-c)
                             ((eq expert 'expert) 'display-courbe-d))
                       (list 
                          (catenate "expert-canal : canavex : " libelle)
                          (get-slot-value expert 'graphique-liste-des-objects-affiches))))
          (setq *current-expert expert-save)
          (setq *corrector-kx* corrector-savex)
          (setq *corrector-ky* corrector-savey)
          ))


(de expert-echelle-y-moins-20 (expert)
    (prog (corrector-savex corrector-savey expert-save)
          (setq expert-save *current-expert*)
          (setq *current-expert* expert)
          (setq corrector-savex *corrector-kx*)
          (setq corrector-savey *corrector-ky*)
          (setq *corrector-kx* (get-slot-value expert 'corrector-kx))
          (setq *corrector-ky* (/ (get-slot-value expert 'corrector-ky) 1.50))
          (setf (get-slot-value expert 'corrector-ky) *corrector-ky*)
          (setf (get-slot-value expert 'graphique) 
                (apply (cond ((eq expert 'expert-canal) 'display-courbe-a)
                             ((eq expert 'expert-elliott) 'display-courbe-b)
                             ((eq expert 'expert-fourier) 'display-courbe-c)
                             ((eq expert 'expert) 'display-courbe-d))
                       (list
                          (catenate "expert-canal : canavex : " libelle)
                          (get-slot-value expert 'graphique-liste-des-objects-affiches))))
          (setq *current-expert expert-save)
          (setq *corrector-kx* corrector-savex)
          (setq *corrector-ky* corrector-savey)
          ))


                                 
(de wait-a-step ()
    (prog (i n)
          (setq n 15000)
          (setq i 0)
          loop
          (when (> i n) (return))
          (setq i (1+ i))
          (go loop)))




