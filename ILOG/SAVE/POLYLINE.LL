(defabbrev PolyLine {image}:polyline)

(defstruct {polyline} vx vy n)

(setq #:sys-package:colon '{polyline})

(de polyline (vx vy)
    (let* ((nx (vlength vx))
           (ny (vlength vy))
           (n (if (> nx ny) ny nx)))
      (omakeq {polyline} vx vx vy vy n n)))

(de :display (line dx dy region)
    (let ((n (:n line))
          (vx (:vx line))
          (vy (:vy line)))
      (for (i 0 1 (sub1 n))
           (vset vx i (add (vref vx i) dx))
           (vset vy i (add (vref vy i) dy)))
      (draw-polyline (:n line)  (:vx line) (:vy line))
      (for (i 0 1 (sub1 n))
           (vset vx i (sub (vref vx i) dx))
           (vset vy i (sub (vref vy i) dy)))))

(de :x (line)
    (let ((n (:n line))
          (vx (:vx line))
          (x 32767))
      (for (i 0 1 (sub1 n))
           (when (lt (vref vx i) x)
                 (setq x (vref vx i))))
      x))

(de :y (line)
    (let ((n (:n line))
          (vy (:vy line))
          (y 32767))
      (for (i 0 1 (sub1 n))
           (when (lt (vref vy i) y)
                 (setq y (vref vy i))))
      y))

(de :width (line)
    (let ((n (:n line))
          (vx (:vx line))
          (xmin 32767)
          (xmax 0))
      (for (i 0 1 (sub1 n))
           (when (lt (vref vx i) xmin)
                 (setq xmin (vref vx i)))
           (when (gt (vref vx i) xmax)
                 (setq xmax (vref vx i))))
      (sub xmax xmin)))

(de :height (line)
    (let ((n (:n line))
          (vy (:vy line))
          (ymin 32767)
          (ymax 0))
      (for (i 0 1 (sub1 n))
           (when (lt (vref vy i) ymin)
                 (setq ymin (vref vy i)))
           (when (gt (vref vy i) ymax)
                 (setq ymax (vref vy i))))
      (sub ymax ymin)))

(de :bounding-box (line rectangle)
    ({Rectangle}:x rectangle (:x line))
    ({Rectangle}:y rectangle (:y line))
    ({Rectangle}:w rectangle (:width line))
    ({Rectangle}:h rectangle (:height line))
    rectangle)
