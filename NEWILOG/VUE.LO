(loader '((title |vue.lo|)))
(put-abbrev 'vue-sur-voyeur '#:image:rectangle:application:vue-sur-voyeur)
(putprop '#:image:rectangle:application:vue-sur-voyeur '((() ()) titre voyeur) 'defstruct)
(loader'((fentry #:image:rectangle:application:vue-sur-voyeur:make subr0)
(entry #:image:rectangle:application:vue-sur-voyeur:make subr0)
(push (@ 101))
(push '0)
(push '0)
(push '1)
(push '1)
(push nil)
(push (@ 102))
(mov '0 a4)
(jmp view)
102
(eval ())
(push a1)
(push nil)
(push nil)
(push nil)
(mov '9 a4)
(jmp vector)
101
(eval ())
(push a1)
(push (@ 103))
(push a1)
(push '#:image:rectangle:application:vue-sur-voyeur)
(mov '2 a4)
(jmp typevector)
103
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:image:rectangle:application:vue-sur-voyeur:titre nsubr)
(entry #:image:rectangle:application:vue-sur-voyeur:titre nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:application:vue-sur-voyeur:titre)
(push '7)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:application:vue-sur-voyeur:titre '#:image:rectangle:application:vue-sur-voyeur:titre 'setf-inverse) '#:image:rectangle:application:vue-sur-voyeur:titre)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:application:vue-sur-voyeur:titre (struct . valeur) (ifn valeur (list 'vref struct 7) (list 'vset struct 7 (car valeur))))))
(loader'((fentry #:image:rectangle:application:vue-sur-voyeur:voyeur nsubr)
(entry #:image:rectangle:application:vue-sur-voyeur:voyeur nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:application:vue-sur-voyeur:voyeur)
(push '8)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:rectangle:application:vue-sur-voyeur:voyeur '#:image:rectangle:application:vue-sur-voyeur:voyeur 'setf-inverse) '#:image:rectangle:application:vue-sur-voyeur:voyeur)))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:application:vue-sur-voyeur:voyeur (struct . valeur) (ifn valeur (list 'vref struct 8) (list 'vset struct 8 (car valeur))))))
(setq #:sys-package:colon '#:image:rectangle:application:vue-sur-voyeur)
(loader'((entry #:image:rectangle:application:vue-sur-voyeur:create subr0)
(mov '#:image:rectangle:application:vue-sur-voyeur a1)
(jmp new)
))
(loader'((fentry #:image:rectangle:application:vue-sur-voyeur:initialize nsubr)
(entry #:image:rectangle:application:vue-sur-voyeur:initialize nsubr)
(cnbeq a4 '12 0)
(mov '#:image:rectangle:application:vue-sur-voyeur:initialize a1)
(mov '12 a2)
(jmp #:llcp:errwna)
0
(push (cvalq vue-sur-voyeur))
(mov (& 12) (cvalq vue-sur-voyeur))
(push '1)
(push '(vue-sur-voyeur))
(push (@ #:image:rectangle:application:vue-sur-voyeur:initialize))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push '0)
(push '0)
(push nil)
(btnil (& 20) 102)
(hgsize (& 20) a3)
(mov '0 a2)
(mov (& 20) a1)
(jcall width-substring)
(mov a1 (& 2))
(hgsize (& 20) a3)
(mov '0 a2)
(mov (& 20) a1)
(jcall height-substring)
(mov a1 (& 1))
102
(push (@ 103))
(push (& 20))
(push '1)
(mov '1 a4)
(plus (& 4) a4)
(push a4)
(mov (& 20) a4)
(diff '2 a4)
(push a4)
(mov (& 6) a4)
(plus '2 a4)
(mov (& 20) a3)
(diff a4 a3)
(push a3)
(push (& 20))
(push (& 20))
(mov (& 20) a4)
(diff '2 a4)
(push a4)
(mov (& 10) a4)
(plus '2 a4)
(mov (& 20) a3)
(diff a4 a3)
(push a3)
(push (& 20))
(mov '10 a4)
(jmp funcall)
103
(eval ())
(mov a1 (& 0))
(hpmovx (& 20) (cvalq vue-sur-voyeur) '7)
(hpmovx a1 (cvalq vue-sur-voyeur) '8)
(bfnil (& 20) 104)
(push (@ 106))
(push 'image)
(push (cvalq vue-sur-voyeur))
(push (@ 107))
(push (@ 108))
(push '0)
(push '0)
(push (& 23))
(push (& 23))
(mov '4 a4)
(jmp box)
108
(eval ())
(push a1)
(push (& 5))
(mov '2 a4)
(jmp %view)
107
(eval ())
(push a1)
(mov '3 a4)
(jmp send)
106
(eval ())
(bra 105)
104
(push (@ 109))
(push (& 21))
(push (@ 110))
(push '0)
(push '0)
(push (& 7))
(push (& 7))
(mov '4 a4)
(jmp rectangle)
110
(eval ())
(push a1)
(mov '2 a4)
(jmp %centeredview)
109
(eval ())
(mov a1 (& 20))
(push (@ 111))
(push 'image)
(push (cvalq vue-sur-voyeur))
(push (@ 112))
(push (@ 113))
(push '0)
(push '0)
(push (& 23))
(push (& 23))
(mov '4 a4)
(jmp box)
113
(eval ())
(push a1)
(mov (& 21) a4)
(quo '2 a4)
(mov (& 7) a3)
(quo '2 a3)
(diff a3 a4)
(mov (& 25) a3)
(mov '1 a2)
(mov a4 a1)
(jcall translation)
(push a1)
(push (& 6))
(mov '3 a4)
(jmp %view)
112
(eval ())
(push a1)
(mov '3 a4)
(jmp send)
111
(eval ())
105
(push (@ 114))
(push 'x)
(push (cvalq vue-sur-voyeur))
(push (& 21))
(mov '3 a4)
(jmp send)
114
(eval ())
(push (@ 115))
(push 'y)
(push (cvalq vue-sur-voyeur))
(push (& 20))
(mov '3 a4)
(jmp send)
115
(eval ())
(push (@ 116))
(push 'fit-to-contents)
(push (cvalq vue-sur-voyeur))
(mov '2 a4)
(jmp send)
116
(eval ())
(mov (cvalq vue-sur-voyeur) a1)
(adjstk '3)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq vue-sur-voyeur))
(adjstk '19)
(return)
))
(loader'((fentry vue-sur-voyeur nsubr)
(entry vue-sur-voyeur nsubr)
(cnbeq a4 '10 0)
(mov 'vue-sur-voyeur a1)
(mov '10 a2)
(jmp #:llcp:errwna)
0
(push (@ 101))
(call #:image:rectangle:application:vue-sur-voyeur:create)
(push a1)
(push (& 11))
(push 'voyeur)
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(mov '12 a4)
(jmp #:image:rectangle:application:vue-sur-voyeur:initialize)
101
(eval ())
(adjstk '10)
(return)
))
(loader'((fentry vue-sur-h-voyeur nsubr)
(entry vue-sur-h-voyeur nsubr)
(cnbeq a4 '10 0)
(mov 'vue-sur-h-voyeur a1)
(mov '10 a2)
(jmp #:llcp:errwna)
0
(push (@ 101))
(call #:image:rectangle:application:vue-sur-voyeur:create)
(push a1)
(push (& 11))
(push 'h-voyeur)
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(mov '12 a4)
(jmp #:image:rectangle:application:vue-sur-voyeur:initialize)
101
(eval ())
(adjstk '10)
(return)
))
(loader'((fentry vue-sur-v-voyeur nsubr)
(entry vue-sur-v-voyeur nsubr)
(cnbeq a4 '10 0)
(mov 'vue-sur-v-voyeur a1)
(mov '10 a2)
(jmp #:llcp:errwna)
0
(push (@ 101))
(call #:image:rectangle:application:vue-sur-voyeur:create)
(push a1)
(push (& 11))
(push 'v-voyeur)
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(mov '12 a4)
(jmp #:image:rectangle:application:vue-sur-voyeur:initialize)
101
(eval ())
(adjstk '10)
(return)
))
(loader'((fentry vue-sur-f-voyeur nsubr)
(entry vue-sur-f-voyeur nsubr)
(cnbeq a4 '10 0)
(mov 'vue-sur-f-voyeur a1)
(mov '10 a2)
(jmp #:llcp:errwna)
0
(push (@ 101))
(call #:image:rectangle:application:vue-sur-voyeur:create)
(push a1)
(push (& 11))
(push 'f-voyeur)
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(push (& 12))
(mov '12 a4)
(jmp #:image:rectangle:application:vue-sur-voyeur:initialize)
101
(eval ())
(adjstk '10)
(return)
))
(loader '((end)))
