(loader '((title |echelles.lo|)))
(put-abbrev 'mes-graduations '#:image:mes-graduations)
(setq #:sys-package:colon '#:image:mes-graduations)
(putprop '#:image:mes-graduations '((() () () () () ()) police longueur chaine valeur hor? texte-avant?) 'defstruct)
(loader'((fentry #:image:mes-graduations:make subr0)
(entry #:image:mes-graduations:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '6 a4)
(jmp vector)
101
(eval ())
(push a1)
(push (@ 102))
(push a1)
(push '#:image:mes-graduations)
(mov '2 a4)
(jmp typevector)
102
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:image:mes-graduations:police nsubr)
(entry #:image:mes-graduations:police nsubr)
(push a4)
(push (@ 101))
(push '#:image:mes-graduations:police)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:mes-graduations:police (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:image:mes-graduations:longueur nsubr)
(entry #:image:mes-graduations:longueur nsubr)
(push a4)
(push (@ 101))
(push '#:image:mes-graduations:longueur)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:mes-graduations:longueur (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:image:mes-graduations:chaine nsubr)
(entry #:image:mes-graduations:chaine nsubr)
(push a4)
(push (@ 101))
(push '#:image:mes-graduations:chaine)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:mes-graduations:chaine (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:image:mes-graduations:valeur nsubr)
(entry #:image:mes-graduations:valeur nsubr)
(push a4)
(push (@ 101))
(push '#:image:mes-graduations:valeur)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:mes-graduations:valeur (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:image:mes-graduations:hor? nsubr)
(entry #:image:mes-graduations:hor? nsubr)
(push a4)
(push (@ 101))
(push '#:image:mes-graduations:hor?)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:mes-graduations:hor? (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:image:mes-graduations:texte-avant? nsubr)
(entry #:image:mes-graduations:texte-avant? nsubr)
(push a4)
(push (@ 101))
(push '#:image:mes-graduations:texte-avant?)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:mes-graduations:texte-avant? (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
'#:image:mes-graduations
(defvar #:image:mes-graduations:long-grosse-grad 7)
(defvar #:image:mes-graduations:long-petite-grad 2)
(defvar #:image:mes-graduations:police 0)
(put-abbrev 'echelle '#:image:rectangle:objet-graph:echelle)
(setq #:sys-package:colon '#:image:rectangle:objet-graph:echelle)
(putprop '#:image:rectangle:objet-graph:echelle '((() () ()) hor? texte-avant? graduations) 'defstruct)
(loader'((fentry #:image:rectangle:objet-graph:echelle:make subr0)
(entry #:image:rectangle:objet-graph:echelle:make subr0)
(push (@ 101))
(push '0)
(push '0)
(push '1)
(push '1)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '15 a4)
(jmp vector)
101
(eval ())
(push a1)
(push (@ 102))
(push a1)
(push '#:image:rectangle:objet-graph:echelle)
(mov '2 a4)
(jmp typevector)
102
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:image:rectangle:objet-graph:echelle:hor? nsubr)
(entry #:image:rectangle:objet-graph:echelle:hor? nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:objet-graph:echelle:hor?)
(push '12)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:objet-graph:echelle:hor? (struct . valeur) (ifn valeur (list 'vref struct 12) (list 'vset struct 12 (car valeur))))))
(loader'((fentry #:image:rectangle:objet-graph:echelle:texte-avant? nsubr)
(entry #:image:rectangle:objet-graph:echelle:texte-avant? nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:objet-graph:echelle:texte-avant?)
(push '13)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:objet-graph:echelle:texte-avant? (struct . valeur) (ifn valeur (list 'vref struct 13) (list 'vset struct 13 (car valeur))))))
(loader'((fentry #:image:rectangle:objet-graph:echelle:graduations nsubr)
(entry #:image:rectangle:objet-graph:echelle:graduations nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:objet-graph:echelle:graduations)
(push '14)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:objet-graph:echelle:graduations (struct . valeur) (ifn valeur (list 'vref struct 14) (list 'vset struct 14 (car valeur))))))
'#:image:rectangle:objet-graph:echelle
(put-abbrev 'num-echelle '#:image:rectangle:objet-graph:echelle:num-echelle)
(putprop '#:image:rectangle:objet-graph:echelle:num-echelle '((() ()) pas petit-pas) 'defstruct)
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:make subr0)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:make subr0)
(push (@ 101))
(push '0)
(push '0)
(push '1)
(push '1)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '17 a4)
(jmp vector)
101
(eval ())
(push a1)
(push (@ 102))
(push a1)
(push '#:image:rectangle:objet-graph:echelle:num-echelle)
(mov '2 a4)
(jmp typevector)
102
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:pas nsubr)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:pas nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:objet-graph:echelle:num-echelle:pas)
(push '15)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:objet-graph:echelle:num-echelle:pas (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:petit-pas nsubr)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:petit-pas nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:objet-graph:echelle:num-echelle:petit-pas)
(push '16)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:objet-graph:echelle:num-echelle:petit-pas (struct . valeur) (ifn valeur (list 'vref struct 16) (list 'vset struct 16 (car valeur))))))
'#:image:rectangle:objet-graph:echelle:num-echelle
(put-abbrev 'cal-echelle '#:image:rectangle:objet-graph:echelle:cal-echelle)
(setq #:sys-package:colon '#:image:rectangle:objet-graph:echelle:cal-echelle)
(putprop '#:image:rectangle:objet-graph:echelle:cal-echelle '((()) quatorze?) 'defstruct)
(loader'((fentry #:image:rectangle:objet-graph:echelle:cal-echelle:make subr0)
(entry #:image:rectangle:objet-graph:echelle:cal-echelle:make subr0)
(push (@ 101))
(push '0)
(push '0)
(push '1)
(push '1)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '16 a4)
(jmp vector)
101
(eval ())
(push a1)
(push (@ 102))
(push a1)
(push '#:image:rectangle:objet-graph:echelle:cal-echelle)
(mov '2 a4)
(jmp typevector)
102
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:image:rectangle:objet-graph:echelle:cal-echelle:quatorze? nsubr)
(entry #:image:rectangle:objet-graph:echelle:cal-echelle:quatorze? nsubr)
(push a4)
(push (@ 101))
(push '#:image:rectangle:objet-graph:echelle:cal-echelle:quatorze?)
(push '15)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'compiler) (progn (defmacro-open #:image:rectangle:objet-graph:echelle:cal-echelle:quatorze? (struct . valeur) (ifn valeur (list 'vref struct 15) (list 'vset struct 15 (car valeur))))))
'#:image:rectangle:objet-graph:echelle:cal-echelle
(defvar #:image:rectangle:objet-graph:echelle:cal-echelle:quatorze-mois 450)
(setq #:sys-package:colon '#:image:mes-graduations)
(loader'((entry #:image:mes-graduations:create subr0)
(mov '#:image:mes-graduations a1)
(jmp new)
))
(remprop '#:image:mes-graduations:create '#:system:loaded-from-file)
(loader'((entry #:image:mes-graduations:initialize nsubr)
(hpmovx (& 5) (& 6) '0)
(hpmovx (& 4) (& 6) '1)
(hpmovx (& 3) (& 6) '2)
(hpmovx (& 2) (& 6) '3)
(hpmovx (& 1) (& 6) '4)
(hpmovx (& 0) (& 6) '5)
(mov (& 6) a1)
(adjstk '7)
(return)
))
(remprop '#:image:mes-graduations:initialize '#:system:loaded-from-file)
(loader'((entry grosse-graduation nsubr)
(push (@ 101))
(call #:image:mes-graduations:create)
(push a1)
(push (cvalq #:image:mes-graduations:police))
(push (cvalq #:image:mes-graduations:long-grosse-grad))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '7 a4)
(bra #:image:mes-graduations:initialize)
101
(eval ())
(adjstk '4)
(return)
))
(remprop 'grosse-graduation '#:system:loaded-from-file)
(loader'((entry petite-graduation nsubr)
(push (@ 101))
(call #:image:mes-graduations:create)
(push a1)
(push (cvalq #:image:mes-graduations:police))
(push (cvalq #:image:mes-graduations:long-petite-grad))
(push (& 7))
(push (& 7))
(push (& 7))
(push (& 7))
(mov '7 a4)
(bra #:image:mes-graduations:initialize)
101
(eval ())
(adjstk '4)
(return)
))
(remprop 'petite-graduation '#:system:loaded-from-file)
(loader'((fentry #:image:mes-graduations:hauteur-totale subr1)
(entry #:image:mes-graduations:hauteur-totale subr1)
(push a1)
(push '0)
(hpxmov a1 '2 a4)
(btnil a4 102)
(hpxmov (cvalq #:graph-env:current-graph-env) '0 a4)
(push a4)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(hpxmov a1 '0 a1)
(jcall current-font1)
(hpxmov (& 5) '4 a4)
(bfnil a4 105)
(hpxmov (& 5) '2 a1)
(hpxmov (& 5) '2 a3)
(hgsize a3 a3)
(mov '0 a2)
(jcall width-substring)
(mov a1 a4)
(bra 106)
105
(hpxmov (& 5) '2 a1)
(hpxmov (& 5) '2 a3)
(hgsize a3 a3)
(mov '0 a2)
(jcall height-substring)
(mov a1 a4)
106
(mov a4 (& 4))
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 104) a3)
103
(push a3)
(push a2)
(mov (& 3) a1)
(jcall current-font1)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
104
(eval ())
(adjstk '1)
102
(mov (& 0) a1)
(adjstk '2)
(return)
))
(remprop '#:image:mes-graduations:hauteur-totale '#:system:loaded-from-file)
(loader'((fentry #:image:mes-graduations:longueur-totale subr1)
(entry #:image:mes-graduations:longueur-totale subr1)
(push a1)
(push '0)
(hpxmov a1 '2 a4)
(btnil a4 102)
(hpxmov (cvalq #:graph-env:current-graph-env) '0 a4)
(push a4)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(hpxmov a1 '0 a1)
(jcall current-font1)
(hpxmov (& 5) '4 a4)
(btnil a4 105)
(hpxmov (& 5) '2 a1)
(hpxmov (& 5) '2 a3)
(hgsize a3 a3)
(mov '0 a2)
(jcall width-substring)
(mov a1 a4)
(bra 106)
105
(hpxmov (& 5) '2 a1)
(hpxmov (& 5) '2 a3)
(hgsize a3 a3)
(mov '0 a2)
(jcall height-substring)
(mov a1 a4)
106
(mov a4 (& 4))
(mov (& 1) dlink)
(adjstk '3)
(push a4)
(mov (@ 104) a3)
103
(push a3)
(push a2)
(mov (& 3) a1)
(jcall current-font1)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
104
(eval ())
(adjstk '1)
102
(hpxmov (& 1) '1 a1)
(plus (& 0) a1)
(adjstk '2)
(return)
))
(remprop '#:image:mes-graduations:longueur-totale '#:system:loaded-from-file)
(loader'((fentry #:image:mes-graduations:display nsubr)
(entry #:image:mes-graduations:display nsubr)
(cnbeq a4 '4 0)
(mov '#:image:mes-graduations:display a1)
(mov '4 a2)
(jmp #:llcp:errwna)
0
(push (@ 101))
(push (& 4))
(push (& 4))
(push (& 4))
(push (& 4))
(push 't)
(mov '5 a4)
(jmp #:image:mes-graduations:display-with-string?)
101
(eval ())
(adjstk '4)
(return)
))
(remprop '#:image:mes-graduations:display '#:system:loaded-from-file)
(loader'((fentry #:image:mes-graduations:display-with-string? nsubr)
(entry #:image:mes-graduations:display-with-string? nsubr)
(cnbeq a4 '5 0)
(mov '#:image:mes-graduations:display-with-string? a1)
(mov '5 a2)
(jmp #:llcp:errwna)
0
(push '0)
(push '0)
(push '0)
(push '0)
(push '0)
(push '0)
(push '0)
(hpxmov (& 11) '2 a4)
(push a4)
(hpxmov (& 12) '4 a3)
(push a3)
(hpxmov (& 13) '5 a2)
(push a2)
(hpxmov (& 14) '1 a1)
(push a1)
(hpxmov (& 15) '0 a4)
(push a4)
(btnil (& 12) 102)
(btnil (& 4) 102)
(mov (& 4) a2)
(mov '"" a1)
(jcall eqstring)
(bfnil a1 102)
(hpxmov (cvalq #:graph-env:current-graph-env) '0 a4)
(push a4)
(push (@ 103))
(push dlink)
(push prot)
(stack dlink)
(mov (& 4) a1)
(jcall current-font1)
(hgsize (& 8) a3)
(mov '0 a2)
(mov (& 8) a1)
(jcall width-substring)
(mov a1 (& 11))
(hgsize (& 8) a3)
(mov '0 a2)
(mov (& 8) a1)
(jcall height-substring)
(mov a1 (& 10))
(jcall y-base-space)
(mov a1 (& 9))
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 104) a3)
103
(push a3)
(push a2)
(mov (& 3) a1)
(jcall current-font1)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
104
(eval ())
(adjstk '1)
102
(btnil (& 3) 105)
(btnil (& 2) 105)
(mov (& 15) a4)
(diff (& 1) a4)
(mov a4 (& 11))
(mov (& 14) (& 10))
(diff (& 7) a4)
(mov a4 (& 9))
(mov (& 10) (& 8))
(bra 106)
105
(btnil (& 3) 107)
(bfnil (& 2) 107)
(mov (& 15) a4)
(plus (& 1) a4)
(mov a4 (& 11))
(mov (& 14) (& 10))
(mov a4 (& 9))
(mov (& 10) (& 8))
(bra 106)
107
(bfnil (& 3) 109)
(btnil (& 2) 109)
(mov (& 15) (& 11))
(mov (& 14) a4)
(diff (& 1) a4)
(mov a4 (& 10))
(mov (& 7) a3)
(quo '2 a3)
(mov (& 11) a2)
(diff a3 a2)
(mov a2 (& 9))
(mov a4 (& 8))
(bra 106)
109
(bfnil (& 3) 106)
(bfnil (& 2) 106)
(mov (& 15) (& 11))
(mov (& 14) a4)
(plus (& 1) a4)
(mov a4 (& 10))
(mov (& 7) a3)
(quo '2 a3)
(mov (& 11) a2)
(diff a3 a2)
(mov a2 (& 9))
(plus (& 5) a4)
(mov a4 (& 8))
106
(push (@ 113))
(push (& 16))
(push (& 16))
(push (& 14))
(push (& 14))
(mov '4 a4)
(jmp draw-line)
113
(eval ())
(btnil (& 12) 114)
(btnil (& 4) 114)
(mov (& 4) a2)
(mov '"" a1)
(jcall eqstring)
(bfnil a1 114)
(hpxmov (cvalq #:graph-env:current-graph-env) '0 a4)
(push a4)
(push (@ 116))
(push dlink)
(push prot)
(stack dlink)
(mov (& 4) a1)
(jcall current-font1)
(push (& 8))
(push (@ 118))
(push (& 15))
(push (& 15))
(push (& 3))
(push '0)
(hgsize (& 5) a4)
(push a4)
(mov '5 a4)
(jmp draw-substring)
118
(eval ())
(adjstk '1)
(mov (& 1) dlink)
(adjstk '3)
(push a1)
(mov (@ 117) a3)
116
(push a3)
(push a2)
(mov (& 3) a1)
(jcall current-font1)
(pop a2)
(pop a3)
(pop a1)
(bri a3)
117
(eval ())
(adjstk '18)
(return)
114
(mov nil a1)
(adjstk '17)
(return)
))
(remprop '#:image:mes-graduations:display-with-string? '#:system:loaded-from-file)
(setq #:sys-package:colon '#:image:rectangle:objet-graph:echelle)
(remprop '#:image:rectangle:objet-graph:echelle:create '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:initialize subr3)
(entry #:image:rectangle:objet-graph:echelle:initialize subr3)
(push a3)
(push a2)
(push a1)
(push (@ 101))
(push '#:image:rectangle:objet-graph:echelle)
(push 'initialize)
(push a1)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '10 a4)
(jmp send-super)
101
(eval ())
(hpmovx nil (& 0) '14)
(hpmovx (& 1) (& 0) '12)
(hpmovx (& 2) (& 0) '13)
(mov (& 0) a1)
(adjstk '3)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:initialize '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:calculer-graduations subr1)
(entry #:image:rectangle:objet-graph:echelle:calculer-graduations subr1)
(push a1)
(hpxmov a1 '12 a4)
(btnil a4 101)
(push (@ 103))
(push 'max-x)
(push a1)
(mov '2 a4)
(jmp send)
103
(eval ())
(mov a1 a4)
(bra 102)
101
(push (@ 104))
(push 'max-y)
(push a1)
(mov '2 a4)
(jmp send)
104
(eval ())
(mov a1 a4)
102
(push nil)
(push nil)
(push a4)
(push (@ 105))
(push 'premiere-valeur)
(push (& 5))
(mov '2 a4)
(jmp send)
105
(eval ())
(mov a1 (& 1))
106
(cnbgt (& 1) (& 0) 107)
(push (@ 108))
(push 'calculer-grad)
(push (& 5))
(push (& 4))
(mov '3 a4)
(jmp send)
108
(eval ())
(push (@ 109))
(push (& 3))
(jcall ncons)
(push a1)
(mov '2 a4)
(jmp nconc)
109
(eval ())
(mov a1 (& 2))
(push (@ 110))
(push 'prochaine-valeur)
(push (& 5))
(push (& 4))
(mov '3 a4)
(jmp send)
110
(eval ())
(mov a1 (& 1))
(bra 106)
107
(hpmovx (& 2) (& 3) '14)
(mov (& 2) a1)
(adjstk '4)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:calculer-graduations '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:plus-haute-chaine subr1)
(entry #:image:rectangle:objet-graph:echelle:plus-haute-chaine subr1)
(push '0)
(hpxmov a1 '14 a4)
(push a4)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 103))
(push (& 3))
(push (@ 104))
(push 'hauteur-totale)
(push (& 4))
(mov '2 a4)
(jmp send)
104
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
103
(eval ())
(mov a1 (& 2))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:plus-haute-chaine '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:plus-grande-chaine subr1)
(entry #:image:rectangle:objet-graph:echelle:plus-grande-chaine subr1)
(push '0)
(hpxmov a1 '14 a4)
(push a4)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 103))
(push (& 3))
(push (@ 104))
(push 'longueur-totale)
(push (& 4))
(mov '2 a4)
(jmp send)
104
(eval ())
(push a1)
(mov '2 a4)
(jmp max)
103
(eval ())
(mov a1 (& 2))
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:plus-grande-chaine '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:nbre-de-chaines subr1)
(entry #:image:rectangle:objet-graph:echelle:nbre-de-chaines subr1)
(push '0)
(hpxmov a1 '14 a4)
(push a4)
101
(bfcons (& 0) 102)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push (@ 105))
(push 'chaine)
(push (& 2))
(mov '2 a4)
(jmp send)
105
(eval ())
(btnil a1 104)
(push (@ 106))
(push 'chaine)
(push (& 2))
(mov '2 a4)
(jmp send)
106
(eval ())
(mov '"" a2)
(jcall eqstring)
(bfnil a1 104)
(mov (& 2) a1)
(jcall 1+)
(mov a1 (& 2))
104
(adjstk '1)
(bra 101)
102
(adjstk '1)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:nbre-de-chaines '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:display nsubr)
(entry #:image:rectangle:objet-graph:echelle:display nsubr)
(cnbeq a4 '4 0)
(mov '#:image:rectangle:objet-graph:echelle:display a1)
(mov '4 a2)
(jmp #:llcp:errwna)
0
(push (@ 101))
(push 'x)
(push (& 5))
(mov '2 a4)
(jmp send)
101
(eval ())
(push a1)
(push (@ 102))
(push 'y)
(push (& 6))
(mov '2 a4)
(jmp send)
102
(eval ())
(push a1)
(push nil)
(push nil)
(push '0)
(push '0)
(push '0)
(hpxmov (& 10) '12 a4)
(push a4)
(hpxmov (& 11) '13 a3)
(push a3)
(push 't)
(hpxmov (& 13) '14 a2)
(bfnil a2 104)
(mov (& 13) a1)
(jcall #:image:rectangle:objet-graph:echelle:calculer-graduations)
104
(mov (& 13) a1)
(jcall #:image:rectangle:objet-graph:echelle:plus-grande-chaine)
(mov a1 (& 5))
(mov (& 13) a1)
(jcall #:image:rectangle:objet-graph:echelle:plus-haute-chaine)
(mov a1 (& 4))
(btnil (& 2) 105)
(btnil (& 1) 107)
(push (@ 109))
(push 'calcul-de-y)
(push (& 15))
(push (@ 110))
(push 'min-y)
(push (& 18))
(mov '2 a4)
(jmp send)
110
(eval ())
(push a1)
(mov '3 a4)
(jmp send)
109
(eval ())
(mov a1 a4)
(bra 108)
107
(push (@ 111))
(push 'calcul-de-y)
(push (& 15))
(push (@ 112))
(push 'min-y)
(push (& 18))
(mov '2 a4)
(jmp send)
112
(eval ())
(push a1)
(mov '3 a4)
(jmp send)
111
(eval ())
(diff (& 5) a1)
(mov a1 a4)
108
(mov a4 (& 6))
(bra 106)
105
(bfnil (& 1) 113)
(push (@ 115))
(push 'calcul-de-x)
(push (& 15))
(push (@ 116))
(push 'min-x)
(push (& 18))
(mov '2 a4)
(jmp send)
116
(eval ())
(push a1)
(mov '3 a4)
(jmp send)
115
(eval ())
(mov a1 a4)
(bra 114)
113
(push (@ 117))
(push 'calcul-de-x)
(push (& 15))
(push (@ 118))
(push 'min-x)
(push (& 18))
(mov '2 a4)
(jmp send)
118
(eval ())
(push a1)
(mov '3 a4)
(jmp send)
117
(eval ())
(plus (& 5) a1)
(mov a1 a4)
114
(mov a4 (& 7))
(push (@ 119))
(push 'calcul-de-y)
(push (& 15))
(push (@ 120))
(push 'min-y)
(push (& 18))
(mov '2 a4)
(jmp send)
120
(eval ())
(push a1)
(mov '3 a4)
(jmp send)
119
(eval ())
(plus (& 12) a1)
(mov a1 (& 3))
106
(hpxmov (& 13) '14 a4)
(push a4)
121
(bfcons (& 0) 122)
(mov (& 0) a4)
(mov (cdr a4) (& 0))
(push (car a4))
(push nil)
(push nil)
(push nil)
(mov (& 12) a4)
(bfnil a4 123)
(push (@ 124))
(push 'calcul-de-x)
(push (& 20))
(push (@ 125))
(push 'valeur)
(push (& 8))
(mov '2 a4)
(jmp send)
125
(eval ())
(push a1)
(mov '3 a4)
(jmp send)
124
(eval ())
(mov a1 a4)
123
(mov a4 (& 2))
(mov (& 11) a3)
(bfnil a3 126)
(push (@ 127))
(push 'calcul-de-y)
(push (& 20))
(push (@ 128))
(push 'valeur)
(push (& 8))
(mov '2 a4)
(jmp send)
128
(eval ())
(push a1)
(mov '3 a4)
(jmp send)
127
(eval ())
(mov a1 a3)
126
(mov a3 (& 1))
(hpxmov (& 18) '12 a4)
(btnil a4 129)
(mov (& 2) (& 0))
(mov (& 8) a2)
(mov (& 0) a1)
(jcall ge)
(mov a1 (& 5))
(bra 130)
129
(mov a3 (& 0))
(mov (& 8) a2)
(mov a3 a1)
(jcall le)
(mov a1 (& 5))
130
(push (@ 131))
(push 'display-with-string?)
(push (& 5))
(mov (& 17) a4)
(plus (& 20) a4)
(plus (& 5) a4)
(push a4)
(mov (& 17) a4)
(plus (& 20) a4)
(plus (& 5) a4)
(push a4)
(push nil)
(push a1)
(mov '6 a4)
(jmp send)
131
(eval ())
(btnil (& 5) 133)
(push (@ 134))
(push 'chaine)
(push (& 5))
(mov '2 a4)
(jmp send)
134
(eval ())
(btnil a1 133)
(hpxmov (& 18) '12 a4)
(btnil a4 135)
(mov (& 0) a4)
(plus (& 9) a4)
(mov a4 (& 8))
(bra 133)
135
(mov (& 0) a4)
(diff (& 9) a4)
(mov a4 (& 8))
133
(adjstk '4)
(bra 121)
122
(mov nil a1)
(adjstk '15)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:display '#:system:loaded-from-file)
(setq #:sys-package:colon '#:image:rectangle:objet-graph:echelle:num-echelle)
(loader'((entry #:image:rectangle:objet-graph:echelle:num-echelle:create subr0)
(mov '#:image:rectangle:objet-graph:echelle:num-echelle a1)
(jmp new)
))
(remprop '#:image:rectangle:objet-graph:echelle:num-echelle:create '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:initialize subr3)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:initialize subr3)
(push a1)
(push (@ 101))
(push '#:image:rectangle:objet-graph:echelle:num-echelle)
(push 'initialize)
(push a1)
(push a2)
(push a3)
(mov '5 a4)
(jmp send-super)
101
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:num-echelle:initialize '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:prin subr1)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:prin subr1)
(push a1)
(push (@ 101))
(push '"echelle numerique ")
(push (@ 102))
(push 'hor?)
(push a1)
(mov '2 a4)
(jmp send)
102
(eval ())
(push a1)
(push '" ")
(push (@ 103))
(push 'texte-avant?)
(push (& 6))
(mov '2 a4)
(jmp send)
103
(eval ())
(push a1)
(mov '4 a4)
(jmp prin)
101
(eval ())
(adjstk '1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:num-echelle:prin '#:system:loaded-from-file)
(loader'((fentry h-num-echelle subr1)
(entry h-num-echelle subr1)
(push a1)
(call #:image:rectangle:objet-graph:echelle:num-echelle:create)
(mov (& 0) a3)
(mov 't a2)
(adjstk '1)
(jmp #:image:rectangle:objet-graph:echelle:num-echelle:initialize)
))
(remprop 'h-num-echelle '#:system:loaded-from-file)
(loader'((fentry v-num-echelle subr1)
(entry v-num-echelle subr1)
(push a1)
(call #:image:rectangle:objet-graph:echelle:num-echelle:create)
(mov (& 0) a3)
(mov nil a2)
(adjstk '1)
(jmp #:image:rectangle:objet-graph:echelle:num-echelle:initialize)
))
(remprop 'v-num-echelle '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:display nsubr)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:display nsubr)
(cnbeq a4 '4 0)
(mov '#:image:rectangle:objet-graph:echelle:num-echelle:display a1)
(mov '4 a2)
(jmp #:llcp:errwna)
0
(hpxmov (& 3) '16 a4)
(btnil a4 103)
(hpxmov (& 3) '15 a4)
(bfnil a4 102)
103
(mov (& 3) a1)
(jcall #:image:rectangle:objet-graph:echelle:num-echelle:calculer-pas)
(mov (& 3) a1)
(jcall #:image:rectangle:objet-graph:echelle:num-echelle:calculer-petit-pas)
102
(push (@ 104))
(push '#:image:rectangle:objet-graph:echelle:num-echelle)
(push 'display)
(push (& 6))
(push (& 6))
(push (& 6))
(push (& 6))
(mov '6 a4)
(jmp send-super)
104
(eval ())
(adjstk '4)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:num-echelle:display '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:premiere-valeur subr1)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:premiere-valeur subr1)
(push a1)
(push (@ 103))
(push 'hor?)
(push a1)
(mov '2 a4)
(jmp send)
103
(eval ())
(btnil a1 101)
(push (@ 104))
(push 'min-x)
(push (& 2))
(mov '2 a4)
(jmp send)
104
(eval ())
(adjstk '1)
(return)
101
(push (@ 105))
(push 'min-y)
(push (& 2))
(mov '2 a4)
(jmp send)
105
(eval ())
(adjstk '1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:num-echelle:premiere-valeur '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:prochaine-valeur subr2)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:prochaine-valeur subr2)
(push a1)
(hpxmov a1 '16 a1)
(push a1)
(push a2)
(push a2)
(hpxmov (& 3) '16 a2)
(pop a1)
(jcall modulo)
(pop a4)
(diff a1 a4)
(pop a3)
(plus a4 a3)
(mov a3 a1)
(adjstk '1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:num-echelle:prochaine-valeur '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:calculer-grad subr2)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:calculer-grad subr2)
(push a2)
(push a1)
(push a2)
(hpxmov a1 '15 a2)
(pop a1)
(jcall modulo)
(cabne '0 a1 101)
(push (@ 103))
(mov (& 2) a1)
(jcall string)
(push a1)
(push (& 3))
(push (@ 106))
(push 'hor?)
(push (& 5))
(mov '2 a4)
(jmp send)
106
(eval ())
(btnil a1 104)
(mov nil a4)
(bra 105)
104
(mov 't a4)
105
(push a4)
(push (@ 107))
(push 'texte-avant?)
(push (& 6))
(mov '2 a4)
(jmp send)
107
(eval ())
(push a1)
(mov '4 a4)
(bra grosse-graduation)
103
(eval ())
(adjstk '2)
(return)
101
(push (@ 108))
(push nil)
(push (& 3))
(push (@ 111))
(push 'hor?)
(push (& 5))
(mov '2 a4)
(jmp send)
111
(eval ())
(btnil a1 109)
(mov nil a4)
(bra 110)
109
(mov 't a4)
110
(push a4)
(push (@ 112))
(push 'texte-avant?)
(push (& 6))
(mov '2 a4)
(jmp send)
112
(eval ())
(push a1)
(mov '4 a4)
(bra petite-graduation)
108
(eval ())
(adjstk '2)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:num-echelle:calculer-grad '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:calculer-pas subr1)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:calculer-pas subr1)
(push a1)
(push '0)
(push '0)
(push (@ 103))
(push 'hor?)
(push a1)
(mov '2 a4)
(jmp send)
103
(eval ())
(btnil a1 101)
(push (@ 104))
(push 'max-x)
(push (& 4))
(mov '2 a4)
(jmp send)
104
(eval ())
(push a1)
(push (@ 105))
(push 'min-x)
(push (& 5))
(mov '2 a4)
(jmp send)
105
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 0))
(mov a4 a1)
(jcall log10)
(jcall fix)
(mov a1 a2)
(mov '10 a1)
(jcall power)
(jcall fix)
(mov a1 (& 1))
(bra 102)
101
(push (@ 106))
(push 'max-y)
(push (& 4))
(mov '2 a4)
(jmp send)
106
(eval ())
(push a1)
(push (@ 107))
(push 'min-y)
(push (& 5))
(mov '2 a4)
(jmp send)
107
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 0))
(mov a4 a1)
(jcall log10)
(jcall fix)
(mov a1 a2)
(mov '10 a1)
(jcall power)
(jcall fix)
(mov a1 (& 1))
102
(hpmovx a1 (& 2) '15)
(adjstk '3)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:num-echelle:calculer-pas '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:num-echelle:calculer-petit-pas subr1)
(entry #:image:rectangle:objet-graph:echelle:num-echelle:calculer-petit-pas subr1)
(hpxmov a1 '15 a4)
(quo '10 a4)
(hpmovx a4 a1 '16)
(mov a4 a1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:num-echelle:calculer-petit-pas '#:system:loaded-from-file)
(setq #:sys-package:colon '#:image:rectangle:objet-graph:echelle:cal-echelle)
(loader'((entry #:image:rectangle:objet-graph:echelle:cal-echelle:create subr0)
(mov '#:image:rectangle:objet-graph:echelle:cal-echelle a1)
(jmp new)
))
(remprop '#:image:rectangle:objet-graph:echelle:cal-echelle:create '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:cal-echelle:initialize subr3)
(entry #:image:rectangle:objet-graph:echelle:cal-echelle:initialize subr3)
(push a1)
(push (@ 101))
(push '#:image:rectangle:objet-graph:echelle:cal-echelle)
(push 'initialize)
(push a1)
(push a2)
(push a3)
(mov '5 a4)
(jmp send-super)
101
(eval ())
(hpmovx nil (& 0) '15)
(mov (& 0) a1)
(adjstk '1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:cal-echelle:initialize '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:cal-echelle:prin subr1)
(entry #:image:rectangle:objet-graph:echelle:cal-echelle:prin subr1)
(push a1)
(push (@ 101))
(push '"echelle calendrier ")
(push (@ 102))
(push 'hor?)
(push a1)
(mov '2 a4)
(jmp send)
102
(eval ())
(push a1)
(push '" ")
(push (@ 103))
(push 'texte-avant?)
(push (& 6))
(mov '2 a4)
(jmp send)
103
(eval ())
(push a1)
(mov '4 a4)
(jmp prin)
101
(eval ())
(adjstk '1)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:cal-echelle:prin '#:system:loaded-from-file)
(loader'((fentry h-cal-echelle subr1)
(entry h-cal-echelle subr1)
(push a1)
(call #:image:rectangle:objet-graph:echelle:cal-echelle:create)
(mov (& 0) a3)
(mov 't a2)
(adjstk '1)
(jmp #:image:rectangle:objet-graph:echelle:cal-echelle:initialize)
))
(remprop 'h-cal-echelle '#:system:loaded-from-file)
(loader'((fentry v-cal-echelle subr1)
(entry v-cal-echelle subr1)
(push a1)
(call #:image:rectangle:objet-graph:echelle:cal-echelle:create)
(mov (& 0) a3)
(mov nil a2)
(adjstk '1)
(jmp #:image:rectangle:objet-graph:echelle:cal-echelle:initialize)
))
(remprop 'v-cal-echelle '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:cal-echelle:premiere-valeur subr1)
(entry #:image:rectangle:objet-graph:echelle:cal-echelle:premiere-valeur subr1)
(push a1)
(push '0)
(push (@ 103))
(push 'hor?)
(push a1)
(mov '2 a4)
(jmp send)
103
(eval ())
(btnil a1 101)
(push (@ 104))
(push 'max-x)
(push (& 3))
(mov '2 a4)
(jmp send)
104
(eval ())
(push a1)
(push (@ 105))
(push 'min-x)
(push (& 4))
(mov '2 a4)
(jmp send)
105
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 0))
(bra 102)
101
(push (@ 106))
(push 'max-y)
(push (& 3))
(mov '2 a4)
(jmp send)
106
(eval ())
(push a1)
(push (@ 107))
(push 'min-y)
(push (& 4))
(mov '2 a4)
(jmp send)
107
(eval ())
(pop a4)
(diff a1 a4)
(mov a4 (& 0))
102
(cnbgt a4 (cvalq #:image:rectangle:objet-graph:echelle:cal-echelle:quatorze-mois) 109)
(hpmovx 't (& 1) '15)
109
(hpxmov (& 1) '15 a3)
(btnil a3 110)
(push (@ 112))
(push 'min-x)
(push (& 3))
(mov '2 a4)
(jmp send)
112
(eval ())
(jcall #:ma-date:inverse-convert-time)
(jcall #:ma-date:debut-de-mois-suivant)
(adjstk '2)
(jmp #:ma-date:convert-time)
110
(push (@ 113))
(push 'min-x)
(push (& 3))
(mov '2 a4)
(jmp send)
113
(eval ())
(jcall #:ma-date:inverse-convert-time)
(jcall #:ma-date:debut-d-annee-suivante)
(adjstk '2)
(jmp #:ma-date:convert-time)
))
(remprop '#:image:rectangle:objet-graph:echelle:cal-echelle:premiere-valeur '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:cal-echelle:prochaine-valeur subr2)
(entry #:image:rectangle:objet-graph:echelle:cal-echelle:prochaine-valeur subr2)
(hpxmov a1 '15 a4)
(btnil a4 101)
(mov a2 a1)
(jcall #:ma-date:inverse-convert-time)
(jcall #:ma-date:debut-de-mois-suivant)
(jmp #:ma-date:convert-time)
101
(mov a2 a1)
(jcall #:ma-date:inverse-convert-time)
(jcall #:ma-date:debut-de-trimestre-suivant)
(jmp #:ma-date:convert-time)
))
(remprop '#:image:rectangle:objet-graph:echelle:cal-echelle:prochaine-valeur '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:cal-echelle:calculer-grad subr2)
(entry #:image:rectangle:objet-graph:echelle:cal-echelle:calculer-grad subr2)
(push a2)
(push a1)
(mov a2 a1)
(jcall #:ma-date:inverse-convert-time)
(push a1)
(hpxmov (& 1) '15 a4)
(btnil a4 101)
(mov a1 a2)
(mov (& 1) a1)
(jcall #:image:rectangle:objet-graph:echelle:cal-echelle:mois-a-afficher?)
(btnil a1 103)
(push (@ 105))
(mov (& 1) a1)
(jcall #:ma-date:nom-du-mois)
(push a1)
(push (& 4))
(push (@ 108))
(push 'hor?)
(push (& 6))
(mov '2 a4)
(jmp send)
108
(eval ())
(btnil a1 106)
(mov nil a4)
(bra 107)
106
(mov 't a4)
107
(push a4)
(push (@ 109))
(push 'texte-avant?)
(push (& 7))
(mov '2 a4)
(jmp send)
109
(eval ())
(push a1)
(mov '4 a4)
(bra grosse-graduation)
105
(eval ())
(adjstk '3)
(return)
103
(push (@ 110))
(push nil)
(push (& 4))
(push (@ 113))
(push 'hor?)
(push (& 6))
(mov '2 a4)
(jmp send)
113
(eval ())
(btnil a1 111)
(mov nil a4)
(bra 112)
111
(mov 't a4)
112
(push a4)
(push (@ 114))
(push 'texte-avant?)
(push (& 7))
(mov '2 a4)
(jmp send)
114
(eval ())
(push a1)
(mov '4 a4)
(bra petite-graduation)
110
(eval ())
(adjstk '3)
(return)
101
(mov a1 a2)
(mov (& 1) a1)
(jcall #:image:rectangle:objet-graph:echelle:cal-echelle:mois-a-afficher?)
(btnil a1 115)
(push (@ 117))
(push (@ 118))
(push 'annees)
(push (& 3))
(mov '2 a4)
(jmp send)
118
(eval ())
(jcall string)
(push a1)
(push (& 4))
(push (@ 121))
(push 'hor?)
(push (& 6))
(mov '2 a4)
(jmp send)
121
(eval ())
(btnil a1 119)
(mov nil a4)
(bra 120)
119
(mov 't a4)
120
(push a4)
(push (@ 122))
(push 'texte-avant?)
(push (& 7))
(mov '2 a4)
(jmp send)
122
(eval ())
(push a1)
(mov '4 a4)
(bra grosse-graduation)
117
(eval ())
(adjstk '3)
(return)
115
(push (@ 123))
(push nil)
(push (& 4))
(push (@ 126))
(push 'hor?)
(push (& 6))
(mov '2 a4)
(jmp send)
126
(eval ())
(btnil a1 124)
(mov nil a4)
(bra 125)
124
(mov 't a4)
125
(push a4)
(push (@ 127))
(push 'texte-avant?)
(push (& 7))
(mov '2 a4)
(jmp send)
127
(eval ())
(push a1)
(mov '4 a4)
(bra petite-graduation)
123
(eval ())
(adjstk '3)
(return)
))
(remprop '#:image:rectangle:objet-graph:echelle:cal-echelle:calculer-grad '#:system:loaded-from-file)
(loader'((fentry #:image:rectangle:objet-graph:echelle:cal-echelle:mois-a-afficher? subr2)
(entry #:image:rectangle:objet-graph:echelle:cal-echelle:mois-a-afficher? subr2)
(hpxmov a1 '15 a4)
(btnil a4 101)
(push (@ 103))
(push 'mois)
(push a2)
(mov '2 a4)
(jmp send)
103
(eval ())
(mov '(0 3 6 9) a2)
(jmp memq)
101
(push (@ 104))
(push 'mois)
(push a2)
(mov '2 a4)
(jmp send)
104
(eval ())
(mov '(0) a2)
(jmp memq)
))
(remprop '#:image:rectangle:objet-graph:echelle:cal-echelle:mois-a-afficher? '#:system:loaded-from-file)
(loader '((end)))
