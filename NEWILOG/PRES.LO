(loader '((title |pres.lo|)))
(put-abbrev 'presentateur '#:image:view:presentateur)
(putprop '#:image:view:presentateur '((() () () () () ()) min-x min-y max-x max-y rectangle liste-de-courbes) 'defstruct)
(loader'((fentry #:image:view:presentateur:make subr0)
(entry #:image:view:presentateur:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(push nil)
(mov '7 a4)
(jmp vector)
101
(eval ())
(push a1)
(push (@ 102))
(push a1)
(push '#:image:view:presentateur)
(mov '2 a4)
(jmp typevector)
102
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:image:view:presentateur:min-x nsubr)
(entry #:image:view:presentateur:min-x nsubr)
(push a4)
(push (@ 101))
(push '#:image:view:presentateur:min-x)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:view:presentateur:min-x '#:image:view:presentateur:min-x 'setf-inverse) '#:image:view:presentateur:min-x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:view:presentateur:min-x (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:image:view:presentateur:min-y nsubr)
(entry #:image:view:presentateur:min-y nsubr)
(push a4)
(push (@ 101))
(push '#:image:view:presentateur:min-y)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:view:presentateur:min-y '#:image:view:presentateur:min-y 'setf-inverse) '#:image:view:presentateur:min-y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:view:presentateur:min-y (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(loader'((fentry #:image:view:presentateur:max-x nsubr)
(entry #:image:view:presentateur:max-x nsubr)
(push a4)
(push (@ 101))
(push '#:image:view:presentateur:max-x)
(push '3)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:view:presentateur:max-x '#:image:view:presentateur:max-x 'setf-inverse) '#:image:view:presentateur:max-x)))
(if (featurep 'compiler) (progn (defmacro-open #:image:view:presentateur:max-x (struct . valeur) (ifn valeur (list 'vref struct 3) (list 'vset struct 3 (car valeur))))))
(loader'((fentry #:image:view:presentateur:max-y nsubr)
(entry #:image:view:presentateur:max-y nsubr)
(push a4)
(push (@ 101))
(push '#:image:view:presentateur:max-y)
(push '4)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:view:presentateur:max-y '#:image:view:presentateur:max-y 'setf-inverse) '#:image:view:presentateur:max-y)))
(if (featurep 'compiler) (progn (defmacro-open #:image:view:presentateur:max-y (struct . valeur) (ifn valeur (list 'vref struct 4) (list 'vset struct 4 (car valeur))))))
(loader'((fentry #:image:view:presentateur:rectangle nsubr)
(entry #:image:view:presentateur:rectangle nsubr)
(push a4)
(push (@ 101))
(push '#:image:view:presentateur:rectangle)
(push '5)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:view:presentateur:rectangle '#:image:view:presentateur:rectangle 'setf-inverse) '#:image:view:presentateur:rectangle)))
(if (featurep 'compiler) (progn (defmacro-open #:image:view:presentateur:rectangle (struct . valeur) (ifn valeur (list 'vref struct 5) (list 'vset struct 5 (car valeur))))))
(loader'((fentry #:image:view:presentateur:liste-de-courbes nsubr)
(entry #:image:view:presentateur:liste-de-courbes nsubr)
(push a4)
(push (@ 101))
(push '#:image:view:presentateur:liste-de-courbes)
(push '6)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:image:view:presentateur:liste-de-courbes '#:image:view:presentateur:liste-de-courbes 'setf-inverse) '#:image:view:presentateur:liste-de-courbes)))
(if (featurep 'compiler) (progn (defmacro-open #:image:view:presentateur:liste-de-courbes (struct . valeur) (ifn valeur (list 'vref struct 6) (list 'vset struct 6 (car valeur))))))
(setq #:sys-package:colon '#:image:view:presentateur)
(loader'((entry #:image:view:presentateur:create subr0)
(mov '#:image:view:presentateur a1)
(jmp new)
))
(loader'((fentry #:image:view:presentateur:initialize nsubr)
(entry #:image:view:presentateur:initialize nsubr)
(cnbeq a4 '8 0)
(mov '#:image:view:presentateur:initialize a1)
(mov '8 a2)
(jmp #:llcp:errwna)
0
(push (cvalq presentateur))
(mov (& 8) (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:initialize))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall #:image:rectangle:make)
(hpmovx '0 a1 '0)
(hpmovx '0 a1 '1)
(hpmovx (& 13) a1 '2)
(hpmovx (& 12) a1 '3)
(hpmovx a1 (cvalq presentateur) '5)
(push (@ 101))
(push 'images)
(push (cvalq presentateur))
(hpxmov (cvalq presentateur) '5 a1)
(mov (& 10) a2)
(jcall cons)
(mov a1 (& 10))
(push a1)
(mov '3 a4)
(jmp send)
101
(eval ())
(hpmovx (& 7) (cvalq presentateur) '6)
(hpmovx (& 11) (cvalq presentateur) '1)
(hpmovx (& 10) (cvalq presentateur) '2)
(hpmovx (& 9) (cvalq presentateur) '3)
(hpmovx (& 8) (cvalq presentateur) '4)
(mov (cvalq presentateur) a1)
(call #:image:view:presentateur:calculer-echelle-des-courbes)
(mov (cvalq presentateur) a1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '15)
(return)
))
(loader'((fentry presentateur nsubr)
(entry presentateur nsubr)
(cnbeq a4 '7 0)
(mov 'presentateur a1)
(mov '7 a2)
(jmp #:llcp:errwna)
0
(push (@ 101))
(call #:image:view:presentateur:create)
(push a1)
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(push (& 8))
(mov '8 a4)
(jmp #:image:view:presentateur:initialize)
101
(eval ())
(adjstk '7)
(return)
))
(loader'((fentry #:image:view:presentateur:width subr1)
(entry #:image:view:presentateur:width subr1)
(push (cvalq presentateur))
(mov a1 (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:width))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(hpxmov a1 '5 a1)
(hpxmov a1 '2 a1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '7)
(return)
))
(loader'((fentry #:image:view:presentateur:height subr1)
(entry #:image:view:presentateur:height subr1)
(push (cvalq presentateur))
(mov a1 (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:height))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(hpxmov a1 '5 a1)
(hpxmov a1 '3 a1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '7)
(return)
))
(loader'((entry #:image:view:presentateur:calculer-echelle-des-courbes subr1)
(push (cvalq presentateur))
(mov a1 (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:calculer-echelle-des-courbes))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(hpxmov a1 '6 a4)
(push a4)
(push a4)
(push (@ 101))
(push (@ 102))
(push 'width)
(push a1)
(mov '2 a4)
(jmp send)
102
(eval ())
(push a1)
(push (@ 103))
(hpxmov (cvalq presentateur) '3 a4)
(push a4)
(hpxmov (cvalq presentateur) '1 a4)
(push a4)
(mov '2 a4)
(jmp -)
103
(eval ())
(push a1)
(mov '2 a4)
(jmp /)
101
(eval ())
(push a1)
(push (@ 104))
(push (@ 105))
(push 'height)
(push (cvalq presentateur))
(mov '2 a4)
(jmp send)
105
(eval ())
(push a1)
(push (@ 106))
(hpxmov (cvalq presentateur) '4 a4)
(push a4)
(hpxmov (cvalq presentateur) '2 a4)
(push a4)
(mov '2 a4)
(jmp -)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp /)
104
(eval ())
(mov a1 a3)
(pop a2)
(pop a1)
(call #:image:view:presentateur:positionner-echelles)
(push (@ 107))
(push (& 1))
(push (@ 108))
(push 'width)
(push (cvalq presentateur))
(mov '2 a4)
(jmp send)
108
(eval ())
(push a1)
(push (@ 109))
(push 'height)
(push (cvalq presentateur))
(mov '2 a4)
(jmp send)
109
(eval ())
(push a1)
(hpxmov (cvalq presentateur) '1 a4)
(push a4)
(hpxmov (cvalq presentateur) '2 a4)
(push a4)
(hpxmov (cvalq presentateur) '3 a4)
(push a4)
(hpxmov (cvalq presentateur) '4 a4)
(push a4)
(mov '7 a4)
(bra #:image:view:presentateur:positionner-origine)
107
(eval ())
(mov (cvalq presentateur) a1)
(adjstk '1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '7)
(return)
))
(loader'((entry #:image:view:presentateur:calculer-echelle-une-courbe subr2)
(push a2)
(push (cvalq presentateur))
(mov a1 (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:calculer-echelle-une-courbe))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a2)
(push (@ 101))
(push (@ 102))
(push 'width)
(push a1)
(mov '2 a4)
(jmp send)
102
(eval ())
(push a1)
(push (@ 103))
(hpxmov (cvalq presentateur) '3 a4)
(push a4)
(hpxmov (cvalq presentateur) '1 a4)
(push a4)
(mov '2 a4)
(jmp -)
103
(eval ())
(push a1)
(mov '2 a4)
(jmp /)
101
(eval ())
(push a1)
(push (@ 104))
(push (@ 105))
(push 'height)
(push (cvalq presentateur))
(mov '2 a4)
(jmp send)
105
(eval ())
(push a1)
(push (@ 106))
(hpxmov (cvalq presentateur) '4 a4)
(push a4)
(hpxmov (cvalq presentateur) '2 a4)
(push a4)
(mov '2 a4)
(jmp -)
106
(eval ())
(push a1)
(mov '2 a4)
(jmp /)
104
(eval ())
(mov a1 a3)
(pop a2)
(pop a1)
(call #:image:view:presentateur:positionner-une-echelle)
(push (@ 107))
(push (& 8))
(push (@ 108))
(push 'width)
(push (cvalq presentateur))
(mov '2 a4)
(jmp send)
108
(eval ())
(push a1)
(push (@ 109))
(push 'height)
(push (cvalq presentateur))
(mov '2 a4)
(jmp send)
109
(eval ())
(push a1)
(hpxmov (cvalq presentateur) '1 a4)
(push a4)
(hpxmov (cvalq presentateur) '2 a4)
(push a4)
(hpxmov (cvalq presentateur) '3 a4)
(push a4)
(hpxmov (cvalq presentateur) '4 a4)
(push a4)
(mov '7 a4)
(bra #:image:view:presentateur:positionner-une-origine)
107
(eval ())
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '8)
(return)
))
(loader'((entry #:image:view:presentateur:positionner-echelles subr3)
(push a3)
(push a2)
(push a1)
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(mov (& 4) a3)
(mov (& 3) a2)
(mov (& 0) a1)
(call #:image:view:presentateur:positionner-une-echelle)
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '4)
(jmp nreverse)
))
(loader'((entry #:image:view:presentateur:positionner-origine nsubr)
(push (& 6))
(push nil)
101
(bfcons (& 1) 102)
(mov (& 1) a4)
(mov (cdr a4) (& 1))
(push (car a4))
(push (@ 103))
(push (& 1))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(push (& 10))
(mov '7 a4)
(bra #:image:view:presentateur:positionner-une-origine)
103
(eval ())
(adjstk '1)
(mov (& 0) a2)
(jcall cons)
(mov a1 (& 0))
(bra 101)
102
(mov (& 0) a1)
(adjstk '9)
(jmp nreverse)
))
(loader'((entry #:image:view:presentateur:positionner-une-echelle subr3)
(push a3)
(push a2)
(push a1)
(mov '#:image:rectangle:objet-graph a2)
(jcall typep)
(btnil a1 101)
(push (@ 103))
(push 'ech-x)
(push (& 2))
(push (& 4))
(mov '3 a4)
(jmp send)
103
(eval ())
(push (@ 104))
(push 'ech-y)
(push (& 2))
(push (& 5))
(mov '3 a4)
(jmp send)
104
(eval ())
(adjstk '3)
(return)
101
(mov nil a1)
(adjstk '3)
(return)
))
(loader'((entry #:image:view:presentateur:positionner-une-origine nsubr)
(mov '#:image:rectangle:objet-graph a2)
(mov (& 6) a1)
(jcall typep)
(btnil a1 101)
(push (@ 103))
(push 'h-total)
(push (& 8))
(push (& 7))
(mov '3 a4)
(jmp send)
103
(eval ())
(push (@ 104))
(push 'min-x)
(push (& 8))
(push (& 6))
(mov '3 a4)
(jmp send)
104
(eval ())
(push (@ 105))
(push 'min-y)
(push (& 8))
(push (& 5))
(mov '3 a4)
(jmp send)
105
(eval ())
(push (@ 106))
(push 'max-x)
(push (& 8))
(push (& 4))
(mov '3 a4)
(jmp send)
106
(eval ())
(push (@ 107))
(push 'max-y)
(push (& 8))
(push (& 3))
(mov '3 a4)
(jmp send)
107
(eval ())
(adjstk '7)
(return)
101
(mov 'image a2)
(mov (& 6) a1)
(jcall typep)
(btnil a1 108)
(push (@ 110))
(push 'grow)
(push (& 8))
(push (& 8))
(push (& 8))
(mov '4 a4)
(jmp send)
110
(eval ())
(adjstk '7)
(return)
108
(mov nil a1)
(adjstk '7)
(return)
))
(loader'((fentry #:image:view:presentateur:grow subr3)
(entry #:image:view:presentateur:grow subr3)
(push a3)
(push a2)
(push (cvalq presentateur))
(mov a1 (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:grow))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a2)
(push (@ 104))
(push 'width)
(push a1)
(mov '2 a4)
(jmp send)
104
(eval ())
(pop a4)
(cabne a4 a1 103)
(push (@ 105))
(push 'height)
(push (cvalq presentateur))
(mov '2 a4)
(jmp send)
105
(eval ())
(cabeq (& 8) a1 101)
103
(push (@ 106))
(push '#:image:view:presentateur)
(push 'grow)
(push (cvalq presentateur))
(push (& 11))
(push (& 13))
(mov '5 a4)
(jmp send-super)
106
(eval ())
(push (@ 107))
(push 'grow)
(hpxmov (cvalq presentateur) '5 a4)
(push a4)
(push (& 10))
(push (& 12))
(mov '4 a4)
(jmp send)
107
(eval ())
(mov (cvalq presentateur) a1)
(call #:image:view:presentateur:calculer-echelle-des-courbes)
(bra 102)
101
(mov nil a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '9)
(return)
))
(loader'((fentry #:image:view:presentateur:inserer-courbe subr2)
(entry #:image:view:presentateur:inserer-courbe subr2)
(push a2)
(push (cvalq presentateur))
(mov a1 (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:inserer-courbe))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(hpxmov a1 '6 a4)
(call #:image:view:presentateur:calculer-echelle-une-courbe)
(push (@ 101))
(push 'insert-image)
(push (cvalq presentateur))
(push (& 10))
(push '10000)
(mov '4 a4)
(jmp send)
101
(eval ())
(mov (cvalq presentateur) a1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '8)
(return)
))
(loader'((fentry #:image:view:presentateur:retirer-courbe subr2)
(entry #:image:view:presentateur:retirer-courbe subr2)
(push a2)
(push (cvalq presentateur))
(mov a1 (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:retirer-courbe))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(hpxmov a1 '6 a4)
(push a4)
(push (@ 101))
(push 'remove-image)
(push a1)
(push a2)
(mov '3 a4)
(jmp send)
101
(eval ())
(mov (& 0) a2)
(mov (& 8) a1)
(jcall delq)
(hpmovx a1 (cvalq presentateur) '6)
(mov (cvalq presentateur) a1)
(adjstk '1)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '8)
(return)
))
(loader'((fentry #:image:view:presentateur:modifier-courbe subr3)
(entry #:image:view:presentateur:modifier-courbe subr3)
(push a3)
(push (cvalq presentateur))
(mov a1 (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:modifier-courbe))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(jcall #:image:view:presentateur:retirer-courbe)
(mov (& 7) a2)
(mov (cvalq presentateur) a1)
(jcall #:image:view:presentateur:inserer-courbe)
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '8)
(return)
))
(loader'((fentry #:image:view:presentateur:is-one-of-my-courbes subr2)
(entry #:image:view:presentateur:is-one-of-my-courbes subr2)
(push (cvalq presentateur))
(mov a1 (cvalq presentateur))
(push '1)
(push '(presentateur))
(push (@ #:image:view:presentateur:is-one-of-my-courbes))
(push llink)
(mov nil llink)
(push dlink)
(push cbindn)
(stack dlink)
(push a2)
(hpxmov a1 '6 a2)
(pop a1)
(jcall memq)
(btnil a1 101)
(mov (cvalq presentateur) a1)
(bra 102)
101
(mov nil a1)
102
(mov (& 1) dlink)
(mov (& 2) llink)
(mov (& 6) (cvalq presentateur))
(adjstk '7)
(return)
))
(loader '((end)))
