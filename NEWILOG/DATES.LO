(loader '((title |dates.lo|)))
(put-abbrev 'ma-date 'ma-date)
(setq #:sys-package:colon 'ma-date)
(putprop 'ma-date '((() () ()) annees mois jours) 'defstruct)
(loader'((fentry #:ma-date:make subr0)
(entry #:ma-date:make subr0)
(push (@ 101))
(push nil)
(push nil)
(push nil)
(mov '3 a4)
(jmp vector)
101
(eval ())
(push a1)
(push (@ 102))
(push a1)
(push 'ma-date)
(mov '2 a4)
(jmp typevector)
102
(eval ())
(mov (& 0) a1)
(adjstk '1)
(return)
))
(loader'((fentry #:ma-date:annees nsubr)
(entry #:ma-date:annees nsubr)
(push a4)
(push (@ 101))
(push '#:ma-date:annees)
(push '0)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:ma-date:annees '#:ma-date:annees 'setf-inverse) '#:ma-date:annees)))
(if (featurep 'compiler) (progn (defmacro-open #:ma-date:annees (struct . valeur) (ifn valeur (list 'vref struct 0) (list 'vset struct 0 (car valeur))))))
(loader'((fentry #:ma-date:mois nsubr)
(entry #:ma-date:mois nsubr)
(push a4)
(push (@ 101))
(push '#:ma-date:mois)
(push '1)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:ma-date:mois '#:ma-date:mois 'setf-inverse) '#:ma-date:mois)))
(if (featurep 'compiler) (progn (defmacro-open #:ma-date:mois (struct . valeur) (ifn valeur (list 'vref struct 1) (list 'vset struct 1 (car valeur))))))
(loader'((fentry #:ma-date:jours nsubr)
(entry #:ma-date:jours nsubr)
(push a4)
(push (@ 101))
(push '#:ma-date:jours)
(push '2)
(mov (& 3) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(mov (& 4) a4)
(plus '3 a4)
(xspmov a4 a4)
(push a4)
(push (& 5))
(mov '5 a4)
(jmp #:system:structaccess)
101
(eval ())
(pop a4)
(adjstk a4)
(return)
))
(if (featurep 'setf) (progn (progn (putprop '#:ma-date:jours '#:ma-date:jours 'setf-inverse) '#:ma-date:jours)))
(if (featurep 'compiler) (progn (defmacro-open #:ma-date:jours (struct . valeur) (ifn valeur (list 'vref struct 2) (list 'vset struct 2 (car valeur))))))
(defvar #:ma-date:table-des-mois '("Janvier" "Fevrier " "Mars" "Avril" "Mai" "Juin" "Juillet" "Aout" "Septembre" "Octobre" "Novembre" "Decembre"))
(defvar #:ma-date:global (new 'ma-date))
(setq #:sys-package:colon 'ma-date)
(loader'((fentry #:ma-date:inverse-convert-time subr1)
(entry #:ma-date:inverse-convert-time subr1)
(push a1)
(quo '360 a1)
(push a1)
(times '360 a1)
(mov (& 1) a4)
(diff a1 a4)
(quo '30 a4)
(mov (& 0) a3)
(times '360 a3)
(mov '30 a2)
(times a4 a2)
(plus a2 a3)
(mov (& 1) a2)
(diff a3 a2)
(hpmovx (& 0) (cvalq #:ma-date:global) '0)
(hpmovx a4 (cvalq #:ma-date:global) '1)
(hpmovx a2 (cvalq #:ma-date:global) '2)
(mov (cvalq #:ma-date:global) a1)
(adjstk '2)
(return)
))
(loader'((fentry #:ma-date:convert-time subr1)
(entry #:ma-date:convert-time subr1)
(push a1)
(hpxmov a1 '0 a4)
(mov '360 a3)
(times a4 a3)
(hpxmov (& 0) '1 a4)
(mov '30 a2)
(times a4 a2)
(hpxmov (& 0) '2 a4)
(plus a4 a2)
(plus a2 a3)
(mov a3 a1)
(adjstk '1)
(return)
))
(loader'((fentry #:ma-date:debut-de-mois-suivant subr1)
(entry #:ma-date:debut-de-mois-suivant subr1)
(hpmovx '0 a1 '2)
(hpxmov a1 '1 a4)
(plus '1 a4)
(hpmovx a4 a1 '1)
(hpxmov a1 '1 a4)
(cnblt a4 '12 29999)
(hpxmov a1 '0 a4)
(plus '1 a4)
(hpmovx a4 a1 '0)
(hpmovx '0 a1 '1)
(return)
29999
(return)
))
(loader'((fentry #:ma-date:debut-de-trimestre-suivant subr1)
(entry #:ma-date:debut-de-trimestre-suivant subr1)
(hpmovx '0 a1 '2)
(hpxmov a1 '1 a4)
(mov '3 a3)
(plus a4 a3)
(quo '3 a3)
(mov '3 a4)
(times a3 a4)
(hpmovx a4 a1 '1)
(hpxmov a1 '1 a4)
(cnblt a4 '12 29999)
(hpxmov a1 '0 a4)
(plus '1 a4)
(hpmovx a4 a1 '0)
(hpmovx '0 a1 '1)
(return)
29999
(return)
))
(loader'((fentry #:ma-date:debut-d-annee-suivante subr1)
(entry #:ma-date:debut-d-annee-suivante subr1)
(hpmovx '0 a1 '2)
(hpmovx '0 a1 '1)
(hpxmov a1 '0 a4)
(plus '1 a4)
(hpmovx a4 a1 '0)
(return)
))
(loader'((fentry #:ma-date:nom-du-mois subr1)
(entry #:ma-date:nom-du-mois subr1)
(hpxmov a1 '1 a1)
(mov (cvalq #:ma-date:table-des-mois) a2)
(jmp nth)
))
(loader '((end)))
